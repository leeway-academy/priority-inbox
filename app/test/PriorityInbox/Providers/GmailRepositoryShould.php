<?php

namespace PriorityInbox\Providers;

use DateTimeImmutable;
use Google\Service\Gmail\Message;
use PhpMimeMailParser\Parser;
use PHPUnit\Framework\TestCase;
use PriorityInbox\Email;
use PriorityInbox\EmailId;
use PriorityInbox\EmailUpdate;
use PriorityInbox\Label;
use PriorityInbox\LabelFilter;
use PriorityInbox\Sender;

class GmailRepositoryShould extends TestCase
{
    public const A_LABEL = "A label";
    public const LABEL_ID = "abcd";
    public const EMAIL_ID = "1";
    public const SENDER_ADDRESS = "asasas";
    public const LABEL_ADD_THIS = "ADD THIS";
    public const LABEL_REMOVE_THIS = "REMOVE THIS";
    public const DATE_FORMAT = 'd-m-Y H:i:s';
    private GmailRepository $gmailRepository;
    private GmailDAO $gmailDAO;

    /**
     * @test
     */
    public function fetch_from_gmail_using_filters(): void
    {
        $label = new Label(self::LABEL_ID);
        $labelFilter = new LabelFilter($label);

        $this
            ->gmailDAO
            ->expects($this->once())
            ->method('getFilteredMessageList')
            ->with($this->equalTo([$labelFilter]));

        $this
            ->gmailRepository
            ->fetch([$labelFilter]);
    }

    /**
     * @test
     */
    public function return_found_objects_as_emails(): void
    {
        $message = new Message();
        $message->setId("MyId");
        $message->setRaw("raw");
        $message->setLabelIds(["some_label"]);

        $this
            ->gmailDAO
            ->method('getFilteredMessageList')
            ->willReturn([$message]);

        $emails = $this
            ->gmailRepository
            ->fetch();

        foreach ($emails as $email) {
            $this->assertInstanceOf(Email::class, $email);
        }
    }

    /**
     * @test
     * @dataProvider provideEncodedMessages
     */
    public function transform_gmail_messages_into_emails(string $rawData, Sender $sender, DateTimeImmutable $sentAt): void
    {
        $message = new Message();
        $message->setId("MyId");
        $message->setRaw($rawData);
        $message->setLabelIds(['some_label']);

        $this
            ->gmailDAO
            ->method('getFilteredMessageList')
            ->willReturn([$message]);

        $email = current($this
            ->gmailRepository
            ->fetch());

        $this->assertEquals($sender, $email->sender());
        $this->assertEquals($sentAt->format(self::DATE_FORMAT), $email->sentAt()->format(self::DATE_FORMAT));
    }

    /**
     * @return void
     * @test
     */
    public function update_emails_in_gmail(): void
    {
        $emailId = new EmailId(self::EMAIL_ID);
        $sender = new Sender(self::SENDER_ADDRESS);
        $sentAt = new DateTimeImmutable();

        $labelToAdd = new Label(self::LABEL_ADD_THIS);
        $labelToRemove = new Label(self::LABEL_REMOVE_THIS);

        $email = new Email($emailId, $sender, $sentAt, [$labelToRemove]);

        $emailUpdate = new EmailUpdate();
        $emailUpdate
            ->addLabel($labelToAdd)
            ->removeLabel($labelToRemove);

        $this->gmailDAO
            ->expects($this->once())
            ->method('modifyMessage')
            ->with(
                $this->equalTo($emailId),
                $this->equalTo($emailUpdate)
            );

        $email
            ->addLabel($labelToAdd)
            ->removeLabel($labelToRemove);

        $this
            ->gmailRepository
            ->updateEmail($email);
    }

    /**
     * @test
     */
    public function remove_labels_that_must_be_removed(): void
    {
        $label = new Label("a label");

        $emailUpdate = (new EmailUpdate())
            ->removeLabel($label);

        $emailId = new EmailId("emailId");
        $this
            ->gmailDAO
            ->expects($this->once())
            ->method('modifyMessage')
            ->with($emailId, $emailUpdate);

        $email = new Email($emailId, new Sender("someone@domain.com"), new DateTimeImmutable());
        $email
            ->removeLabel($label);

        $this
            ->gmailRepository
            ->updateEmail($email);
    }

    /**
     * @test
     */
    public function assign_initial_labels_to_emails(): void
    {
        $message = new Message();
        $message->setId("MyId");
        $message->setRaw("raw");
        $labelId = "label_id";
        $message->setLabelIds([$labelId]);

        $this
            ->gmailDAO
            ->method('getFilteredMessageList')
            ->willReturn([$message]);

        $emails = $this
            ->gmailRepository
            ->fetch();

        foreach ($emails as $email) {
            $this->assertContainsEquals(new Label($labelId), $email->labels());
        }
    }

    /**
     * @return array[]
     */
    public function provideEncodedMessages(): array
    {
        return [
            ["RGVsaXZlcmVkLVRvOiBtYXVyby5jaG9qcmluQGxlZXdheXdlYi5jb20NClJlY2VpdmVkOiBieSAyMDAyOmE0YTpkODQxOjA6MDowOjA6MCB3aXRoIFNNVFAgaWQgZzFjc3AzMDc1ODQxb292Ow0KICAgICAgICBUdWUsIDIgQXVnIDIwMjIgMDc6MTM6MjUgLTA3MDAgKFBEVCkNClgtUmVjZWl2ZWQ6IGJ5IDIwMDI6YTA1OjY0MDI6MjcwZTpiMDo0M2Q6ZTNlMTo4NDdhIHdpdGggU01UUCBpZCB5MTQtMjAwMjBhMDU2NDAyMjcwZTAwYjAwNDNkZTNlMTg0N2FtcjQ4OTgzODllZGQuMTMwLjE2NTk0NDk2MDQzMDY7DQogICAgICAgIFR1ZSwgMDIgQXVnIDIwMjIgMDc6MTM6MjQgLTA3MDAgKFBEVCkNCkFSQy1TZWFsOiBpPTE7IGE9cnNhLXNoYTI1NjsgdD0xNjU5NDQ5NjA0OyBjdj1ub25lOw0KICAgICAgICBkPWdvb2dsZS5jb207IHM9YXJjLTIwMTYwODE2Ow0KICAgICAgICBiPW5WQ2JhdHlyaXNwbU5DN2kxUmN1aTdQbnV5b1daOUlmNWY3alRKb25janc0cEltNE9nRGM3L21oUXloZnE3K1lncA0KICAgICAgICAgbWxCT1lNRmxoVXZJeVBWNjBPS1BYK1FTOURUWE1jbE5tVWdxclp6SUZaL1lMMVZwNnVFTkhqL2xUQUxud1VTM3UxUUgNCiAgICAgICAgIDhxTmU2eHJRM1lQQUY0OVVIZ3NZVEZkSCtZZ0dudVNkaHlZN2tPOVBMK0lVK1I4RjRDNXRiZE9CblY5aFJnR0RvYnVnDQogICAgICAgICAwZ1dwMGFiZU9qMGwweUlBVTFsdFNsV28zamFobUlXaUJzalBldGxUVUIrQTFDMUJjRzNESFNPNjZyV1psTlhUQlFzMg0KICAgICAgICAgdWdESkNBUUgrRHYyVjF2enZudkhLRmEyaUtmWW1ybDRWRkRsRW5sVm5Oc1g3WG91T0hFOThBMmRiSXN5Y1ZGbFduWjQNCiAgICAgICAgIGVrSWc9PQ0KQVJDLU1lc3NhZ2UtU2lnbmF0dXJlOiBpPTE7IGE9cnNhLXNoYTI1NjsgYz1yZWxheGVkL3JlbGF4ZWQ7IGQ9Z29vZ2xlLmNvbTsgcz1hcmMtMjAxNjA4MTY7DQogICAgICAgIGg9dG86c3ViamVjdDptZXNzYWdlLWlkOmRhdGU6ZnJvbTppbi1yZXBseS10bzpyZWZlcmVuY2VzOm1pbWUtdmVyc2lvbg0KICAgICAgICAgOmRraW0tc2lnbmF0dXJlOw0KICAgICAgICBiaD03REY2UGxsMzd6cVFvbDFjS3FqWGRpd2EyM0JYeUlCeWN5MEtXYjl6WEc4PTsNCiAgICAgICAgYj1pSi9naVdJR0pUQ0ppYlJlM1hBOEpSbXIrYUZRc044S1JqYVh2a1B4WTFDUzVlTjZrZ0JpVmx3TXIySmxFM0l0N3ENCiAgICAgICAgIG4vZlFjdTZ1SmZIN3FoZWpLNkk3NnpwdTdjMTBYclR0K2NxUzRMN2VJWVl2ZFBmVGh5S25CamZpc0h2WDM3YlBUWkJiDQogICAgICAgICBnd3diZ1QxK2VnVXRDeU55Sm5MM2NRMXpuaWUzVURjK2MxUDVqaTArM1UxdEJ0dnB1TURuV2lPQU81SEdBMUU0QVdNMA0KICAgICAgICAgQUJydmo3WTVjZVBRajQrd28rSHVOY0pFQWNNcmlra0RBZ0J6TVZtZ0pJWk5uL2xnSXRRWUZWS3JHUGtpUlU1WS8zYjENCiAgICAgICAgIFJXcjFvcTd2ZEZaYkdseXIrYVczeGlkTFhpbHNTSkNaTkt3OUVNUlV4VFNvSWtSZDR3QmljQmVVRlllZFp2MStoT0dlDQogICAgICAgICBxNmlBPT0NCkFSQy1BdXRoZW50aWNhdGlvbi1SZXN1bHRzOiBpPTE7IG14Lmdvb2dsZS5jb207DQogICAgICAgZGtpbT1wYXNzIGhlYWRlci5pPUBnbWFpbC5jb20gaGVhZGVyLnM9MjAyMTAxMTIgaGVhZGVyLmI9VTV6QXh1QXk7DQogICAgICAgc3BmPXBhc3MgKGdvb2dsZS5jb206IGRvbWFpbiBvZiBhc3NlcnBjQGdtYWlsLmNvbSBkZXNpZ25hdGVzIDIwOS44NS4yMjAuNDEgYXMgcGVybWl0dGVkIHNlbmRlcikgc210cC5tYWlsZnJvbT1hc3NlcnBjQGdtYWlsLmNvbTsNCiAgICAgICBkbWFyYz1wYXNzIChwPU5PTkUgc3A9UVVBUkFOVElORSBkaXM9Tk9ORSkgaGVhZGVyLmZyb209Z21haWwuY29tDQpSZXR1cm4tUGF0aDogPGFzc2VycGNAZ21haWwuY29tPg0KUmVjZWl2ZWQ6IGZyb20gbWFpbC1zb3ItZjQxLmdvb2dsZS5jb20gKG1haWwtc29yLWY0MS5nb29nbGUuY29tLiBbMjA5Ljg1LjIyMC40MV0pDQogICAgICAgIGJ5IG14Lmdvb2dsZS5jb20gd2l0aCBTTVRQUyBpZCB6YTIwLTIwMDIwYTE3MDkwNjg3OTQwMGIwMDczMDUyNTcyNTQ1c29yMzA0MDg3M2VqYi4zOS4yMDIyLjA4LjAyLjA3LjEzLjIzDQogICAgICAgIGZvciA8bWF1cm8uY2hvanJpbkBsZWV3YXl3ZWIuY29tPg0KICAgICAgICAoR29vZ2xlIFRyYW5zcG9ydCBTZWN1cml0eSk7DQogICAgICAgIFR1ZSwgMDIgQXVnIDIwMjIgMDc6MTM6MjQgLTA3MDAgKFBEVCkNClJlY2VpdmVkLVNQRjogcGFzcyAoZ29vZ2xlLmNvbTogZG9tYWluIG9mIGFzc2VycGNAZ21haWwuY29tIGRlc2lnbmF0ZXMgMjA5Ljg1LjIyMC40MSBhcyBwZXJtaXR0ZWQgc2VuZGVyKSBjbGllbnQtaXA9MjA5Ljg1LjIyMC40MTsNCkF1dGhlbnRpY2F0aW9uLVJlc3VsdHM6IG14Lmdvb2dsZS5jb207DQogICAgICAgZGtpbT1wYXNzIGhlYWRlci5pPUBnbWFpbC5jb20gaGVhZGVyLnM9MjAyMTAxMTIgaGVhZGVyLmI9VTV6QXh1QXk7DQogICAgICAgc3BmPXBhc3MgKGdvb2dsZS5jb206IGRvbWFpbiBvZiBhc3NlcnBjQGdtYWlsLmNvbSBkZXNpZ25hdGVzIDIwOS44NS4yMjAuNDEgYXMgcGVybWl0dGVkIHNlbmRlcikgc210cC5tYWlsZnJvbT1hc3NlcnBjQGdtYWlsLmNvbTsNCiAgICAgICBkbWFyYz1wYXNzIChwPU5PTkUgc3A9UVVBUkFOVElORSBkaXM9Tk9ORSkgaGVhZGVyLmZyb209Z21haWwuY29tDQpES0lNLVNpZ25hdHVyZTogdj0xOyBhPXJzYS1zaGEyNTY7IGM9cmVsYXhlZC9yZWxheGVkOw0KICAgICAgICBkPWdtYWlsLmNvbTsgcz0yMDIxMDExMjsNCiAgICAgICAgaD1taW1lLXZlcnNpb246cmVmZXJlbmNlczppbi1yZXBseS10bzpmcm9tOmRhdGU6bWVzc2FnZS1pZDpzdWJqZWN0OnRvOw0KICAgICAgICBiaD03REY2UGxsMzd6cVFvbDFjS3FqWGRpd2EyM0JYeUlCeWN5MEtXYjl6WEc4PTsNCiAgICAgICAgYj1VNXpBeHVBeTIzMm1GUTFBbWt5Vms5dURKQW9MdUZSeFRLa1BXYXUrNlozQWJPQnZsSFFtekRaeE9jREhqUUM0T3gNCiAgICAgICAgIFpqR0RwdmJMV1JvL2dlZnM3TEVRK3M3cUNQblZTQ1lyVFVjTHorVHFzVkhpN0RjakNhZWpNUE1Xb2NDakR1SUNJeWIyDQogICAgICAgICBWMnA1eUd4UnZIYlowYmlya212NVF0eEcrZ1cvdGNGLzhvRDYyRmticEVEc0ROR0RUaGhuajlOQStGRW84OXNKZkhTeQ0KICAgICAgICAgRTZ3OEpYSDcrdmdIS3JMMko4d1VJaUFEQjQ4VlpmWGhmWjhaTzJBR1BQdDFISmU2Q0lwRHJOa1prR2V3clJhT2VQSUgNCiAgICAgICAgIENFMlRXeEM1VldBRHR1YkhjRXdjSnRhZXJra0tvNFNMTHNDSlhoMG9HM1NJcmNzeC9UdzY3NjBCNmtYMWZUWGNCSldVDQogICAgICAgICBuRzVBPT0NClgtR29vZ2xlLURLSU0tU2lnbmF0dXJlOiB2PTE7IGE9cnNhLXNoYTI1NjsgYz1yZWxheGVkL3JlbGF4ZWQ7DQogICAgICAgIGQ9MWUxMDAubmV0OyBzPTIwMjEwMTEyOw0KICAgICAgICBoPXgtZ20tbWVzc2FnZS1zdGF0ZTptaW1lLXZlcnNpb246cmVmZXJlbmNlczppbi1yZXBseS10bzpmcm9tOmRhdGUNCiAgICAgICAgIDptZXNzYWdlLWlkOnN1YmplY3Q6dG87DQogICAgICAgIGJoPTdERjZQbGwzN3pxUW9sMWNLcWpYZGl3YTIzQlh5SUJ5Y3kwS1diOXpYRzg9Ow0KICAgICAgICBiPXRxckl1YjJIRzFlU0tyamJxOWVMS3RMbXpRZ2xJc1VySDF4b2I5dkpmV0MwSmdhZkp4V0V5bEpVblJWVDJuR1c4eA0KICAgICAgICAgM3FWeG5FL1Bha3MrUmxZK2lHL0FZbjBxWHp3TVhBNHBmUHhic3RQTndabWE5MkNZU0JiTmI4VWVCMkFSTUhFOUdyUHINCiAgICAgICAgIHp6d2lMNCthb2s0V1R4aDdmbDFsUHhpVG83S01DYUx6bm9xbEZYQ3hLSXpmQlNndCtKaHc5MkhaMjErd2UycG1XUUdDDQogICAgICAgICArZGFvUnMvdU1YQk5lMU1jdVdOaERsMmU3RjQzbkNjc0R3dUNWTWQ2RlBrL3RNbDNEK3FDcXNLVitqTDhXZlFJU3NkTg0KICAgICAgICAgVnpZUWN4S2pzMHJ1cE9oQVRMenE5S2x0dlFxOUNKc0ZxQjI1TEF1SlRydm0zVzlsZ29qN1E0aEcxc2YraUNpdTUxM0QNCiAgICAgICAgIE92R0E9PQ0KWC1HbS1NZXNzYWdlLVN0YXRlOiBBQ2dCZW8yd3g1dmFQUFoyZHIyakVSWnFJMGJOcDhldkVhbllJTjlkTzNQSVdoK0phaTIrZ0dNUg0KCUZDWUZDOVZpWHJYSDZxOHdOblJDdG9UZzJDQ1dwQ3hoaGQ4YW1FQVJDMVBIWXFjPQ0KWC1Hb29nbGUtU210cC1Tb3VyY2U6IEFBNmFnUjV1WEtMMWo3MWJ3aUxGeklZdHhFdGdTbjBPUlBhNGlMbTRENlpHS1g2T0hIaDdQQ09DYWtMRE1oaEpnSDVGbi9PTHVyOGVtbVNQbVRaQXRYN3pSWWM9DQpYLVJlY2VpdmVkOiBieSAyMDAyOmExNzo5MDc6NzM0OTpiMDo3MzA6NWY4NjoxMjlhIHdpdGggU01UUCBpZA0KIGRxOS0yMDAyMGExNzA5MDc3MzQ5MDBiMDA3MzA1Zjg2MTI5YW1yMTA5NDMyMjVlamMuNDY2LjE2NTk0NDk2MDI2NzE7IFR1ZSwgMDINCiBBdWcgMjAyMiAwNzoxMzoyMiAtMDcwMCAoUERUKQ0KTUlNRS1WZXJzaW9uOiAxLjANClJlZmVyZW5jZXM6IDwwYmI2Nzc2YjY0ZmExZmNmYzdhNGQwOGMxLjk4MTBmNTRlMmYuMjAyMjA4MDIxMDE3MDcuNGJlYjE2MTcyMy42NDg2ZTVkZUBtYWlsMTI2LnN1dzExLm1jZGx2Lm5ldD4NCkluLVJlcGx5LVRvOiA8MGJiNjc3NmI2NGZhMWZjZmM3YTRkMDhjMS45ODEwZjU0ZTJmLjIwMjIwODAyMTAxNzA3LjRiZWIxNjE3MjMuNjQ4NmU1ZGVAbWFpbDEyNi5zdXcxMS5tY2Rsdi5uZXQ-DQpGcm9tOiA9P1VURi04P1E_QW5kcmlfQ2hpcmlnPUMzPUJDaXRhPz0gPGFzc2VycGNAZ21haWwuY29tPg0KRGF0ZTogVHVlLCAyIEF1ZyAyMDIyIDEwOjEzOjA5IC0wNDAwDQpNZXNzYWdlLUlEOiA8Q0FCPTZ1UTQ5K28rTjhuMER6ZEQxb0F2MUtxWVB6UzZNN3FBT3p0TVIzWHcwWHBZUFFnQG1haWwuZ21haWwuY29tPg0KU3ViamVjdDogPT9VVEYtOD9CP1VtVTZJTUsvVUc5eUlIRjF3NmtnWld4bFo4T3RjeUJRU0ZBLz89DQpUbzogTWF1cm8gQ2hvanJpbiA8bWF1cm8uY2hvanJpbkBsZWV3YXl3ZWIuY29tPg0KQ29udGVudC1UeXBlOiBtdWx0aXBhcnQvYWx0ZXJuYXRpdmU7IGJvdW5kYXJ5PSIwMDAwMDAwMDAwMDAxNzBhMTEwNWU1NDJiOGNhIg0KDQotLTAwMDAwMDAwMDAwMDE3MGExMTA1ZTU0MmI4Y2ENCkNvbnRlbnQtVHlwZTogdGV4dC9wbGFpbjsgY2hhcnNldD0iVVRGLTgiDQpDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiBxdW90ZWQtcHJpbnRhYmxlDQoNClNhbHVkb3MgTWF1cm8gZW4gZXNlbmNpYSBtdXkgYXByZWNpYWRhcyB0dXMgcGFsYWJyYXMgc29icmUgdG9kbyBwYXJhDQphcXVlbGxvcyBxdWUgZGVudHJvIGRlIG51ZXN0cmEgcHI9QzM9QTFjdGljYSBoYWJpdHVhbCBoZW1vcyBlbGVnaWRvIFBIUC4NCg0KSW5pY2lhbG1lbnRlIGVuIDIwMDQgY3VhbmRvIGNvbm9jPUMzPUFEIGVzdGUgbGVuZ3VhamUsIHZlbj1DMz1BRGEgZGUgZXN0YXINCmRlc2Fycm9sbGFuZG8gZW4gYysrLCB5IGhhYmVyIHBhc2FkbyBwb3IgY29ib2wgRnVqaXRzdSB5IFBhc2NhbCwgdGFtYmk9QzM9DQo9QTluDQpoYWJlciB0ZW5pZG8gbGEgb3BvcnR1bmlkYWQgZGUgY29ub2NlciBlbCBBc3AgZGUgTWljcm9zb2Z0IHkgSmF2YSBkZSBzdW0NCihlbiBhcXVlbCB0aWVtcG8pDQoNClkgZW4gdmVyZGFkIHF1ZWQ9QzM9QTkgZmFjaW5hZG8gY29uIGxhIHNpbXBsaWNpZGFkIGRlIGM9QzM9QjNkaWdvIHF1ZSB2ZW49DQo9QzM9QURhIGFsIGRlZG8gYQ0KcXVpZW4gaGFiPUMzPUFEYSB0ZW5pZG8gdW4gZW5jdWVudHJvIGNvbiBjKysgeSBKYXZhIGEgbWkgcGFyZWNlciBzYWNhYmEgbG8gPQ0KbWVqb3INCmRlIGFtYm9zLg0KDQpSZWN1ZXJkbyBxdWUgZWwgYXF1ZWwgdGllbXBvIGVsIGNtcyBwb3B1bGFyIChwb3IgbG8gbWVub3MgZW4gbWlzIGM9QzM9QURyY3U9DQpsb3MpDQplcmEgUEhQIG51a2UgeSB2ZXIgcXU9QzM9QTkgcG9kPUMzPUFEYW1vcyBoYWNlciB5IGhhY2lhIGRvbmRlIHBvZD1DMz1BRGFtb3M9DQogaXIgY29uIHBocCB5DQpzdXMgZG9zIGFtaWdvcyAobXlzcWwgeSBwb3N0Z3JlcykgZXJhIGRlIGxvIG1lam9yLg0KDQpBZGljaW9uYWxtZW50ZSBjb2luY2lkaT1DMz1CMyBjb24gbGEgaW5zZXJjaT1DMz1CM24gZGUgZm9ybWEgbT1DMz1BMXMgZGlyZWM9DQp0YSBkZSBMaW51eCBlbg0KZWwgbWVyY2FkbyBsb2NhbCB5IGVzbyBleHBhbmRpPUMzPUIzIGRlIGZvcm1hIHJvdHVuZGEgbGFzIHBvc2liaWxpZGFkZXMuDQoNClNpIGJpZW4gY29uIHBocCBoYXN0YSBlbCBtb21lbnRvIGhlIHBvZGlkbyBoYWNlciBjYXNpIGRlIHRvZG8gZXMgb2J2aW8gcXVlDQpkPUMzPUIzbmRlIHRpZW5lIHN1IG1heW9yIGRlYmlsaWRhZCBlcyBlbiBzdSBjYXI9QzM9QTFjdGVyIGJhY2tlbmQgKG1pIGlkZWE9DQpsIGVzIHBvZGVyDQpjcmVhciB1biBwcm9jZXNvIHBhcmEgbG9zIG5hdmVnYWRvcmVzIHF1ZSBsbyBoYWdhIHJpdmFsaXphciBjb24gSnMgZW4gZXN0ZQ0KPUMzPUExbWJpdG8sIHF1aXo9QzM9QTFzIGVzIHVuIHN1ZT1DMz1CMW8gbG9jbykuDQoNCkNyZW8gcXVlIGhveSBlbiBkPUMzPUFEYSBzZWEgZGVqYWRvIG11Y2hvIGRlIGxhZG8gZWwgcG9kZXIgZGUgZXN0YSBoZXJyYW1pZT0NCm50YSB5DQpzZSBoYSBpZG8gc3VwbGFudGFuZG8gY29uIGVsIHBvZGVyIGRlIGpzIHkgc3UgdW5pdmVyc28gcXVlIGF1bnF1ZSBubw0KY29tcGxldGEgdG9kb3MgbG9zIGFzcGVjdG9zIGNhZGEgZD1DMz1BRGEgYWJhcmNhIG09QzM9QTFzIGVsIGFiYW5pY28gZGVsIGJhPQ0KY2sgeSBlbA0KZnJvbnQuDQoNCkRlIGhlY2hvIGVzdG8gZXMgbG8gcXVlIG1lIGhhIGltcHVsc2FkbyBhIGZvcm1hcm1lIHRhbWJpPUMzPUE5biBlbiBqcyBwYXJhID0NCnBvZGVyDQplc3RhciBhbCBkPUMzPUFEYSBlbiBlbGVtZW50b3MgbmVjZXNhcmlvcyBwYXJhIGF0ZW5kZXIgbGFzIGRlbWFuZGFzIGRlIGhveS4NCg0KTGFzdGltb3NhbWVudGUgZGVibyBhZG1pdGlyIChxdWUgc2llbXByZSBtZSBlbnRyaXN0ZWNlIGxhIGxpbWl0YW50ZSBkZWwNCmluZ2w9QzM9QTlzIHkgbT1DMz1BMXMgYT1DMz1CQW4gZW4gbGEgYWN0dWFsaWRhZCB5IHNpZ28gc29zdGVuaWVuZG8gcXVlIGVzID0NCnBlcmZlY3RhbWVudGUNCnZpYWJsZSB1biBwcm9jZXNvcyBkZSBkZXNhcnJvbGxvIGNvbiBlcXVpcG9zIG11bHRpIGlkaW9tPUMzPUExdGljb3Mgc2luIHRlbj0NCmVyDQpxdWUgZGVwZW5kZXIgZGVsIGluZ2w9QzM9QTlzLiBFbnRlbmRpZW5kbyBxdWUgaGF5IGVuIGxhIGFjdHVhbGlkYWQgTWlsZXMgZGUNCnNvbHVjaW9uZXMgZGUgdHJhZHVjY2k9QzM9QjNuIG9ubGluZSBxdWUgbG8gaGFjZW4gcz1DMz1BRG1pbCkNClBFUk8gTkFEQSwuIEhheSBxdWUgdml2aXIgY29uIGxhIHJlYWxpZGFkIHkgZXMgcXVlIGVuIGxhIG1pc21hIHNlIHJlbGVnYSBhDQpsYSBwZXJzb25hIHNpIG5vIGRvbWluYSBlbCBpbmdsPUMzPUE5cyBlbiB1biBuaXZlbCBlbGV2YWRvLg0KDQpIYWNlIHVub3MgZD1DMz1BRGFzIHRlIGNvbWVudGFiYSBxdWUgcGFyYSBtPUMzPUFEIGxlZXIgZWwgaW5nbD1DMz1BOXMgbm8gdGk9DQplbmUgcHJvYmxlbWENCmFsZ3Vuby4NCkFob3JhIGJpZW4gZW50ZW5kZXJsbyBlbiBhdWRpbyAoZXMgZGVjaXIgZW50ZW5kZXIgbG8gcXVlIHNlIGRpY2UgY3VhbmRvDQphbGd1aWVuIGhhYmxhIGVuIGluZ2w9QzM9QTlzKSBzaSBwYXJhIG09QzM9QUQgY29uc2lkZXJvIHF1ZSBzb2xvIGVsIDMwJQ0KWSBlc2NyaWJpcmxvIGRpcj1DMz1BRGEgcXVlIGRlIDQwLTUwJSBwZXJvIHNpIHN1bW8gZWwgdXNvIGRlIHRyYWR1Y3RvciBlc2UNCnBvcmNlbnRhamUgbGxlZ2EgYSA4MC05MCUgLg0KDQoNCkRlIGhlY2hvIFtwZXJkb25hIGxvIGV4dGVuc28gZGUgbWkgbWFpbF0gaGUgcG9kaWRvIHRyYWJhamFyIGNvbiBwZXJzb25hcyBkZQ0KaGFibGEgaW5nbGVzYSBwb3IgbT1DMz1BMXMgZGUgMSBhPUMzPUIxbyBzaW4gbmluZz1DMz1CQW4gZGV0YWxsZSwgYSBkZWNpciB2PQ0KZXJkYWQgaGUNCnRyYWJhamFkbyBjb24gcGVyc29uYXMgZGUgaW5kaWEsIGRlIGNoaW5hLCBjb3JlYSwgRUVVVSB5IG5vIGhlIHRlbmlkbw0KaW5jb252ZW5pZW50ZXMgbmkgZW4gbGFzIGFzaWduYWNpb25lcywgbmkgZW4gbGEgZXhwcmVzaT1DMz1CM24gZGUgaWRlYXMsDQphY2xhcmF0b3JpYXMgbyBjb3JyZWN0aXZvcy4NCg0KU2lnbyBjbGFybyBxdWUgcz1DMz1BRCBlbiBsYSBiPUMzPUJBc3F1ZWRhIGRlIHVuIHB1ZXN0byBsYWJvcmFyIHF1ZSBtZSBwZXJtPQ0KaXRhIHVuDQptYXlvciBjcmVjaW1pZW50byBhIGxhIHBhciBkZSBzYWxpciBkZSBsb3MgcHJveWVjdG9zIGNvbiBzdGFydHVwcyBsYXRpbmFzDQpjdXlhIHJlbXVuZXJhY2k9QzM9QjNuIFsgc2kgbWUgcGVybWl0ZXMgZWwgY29tZW50YXJpb10gZXMgdW4gdmFsb3IgbXV5ID1DMz0NCj1BRG5maW1vIGVuDQpjb21wYXJhdGl2byBjb24gZWwgbWVyY2FkbyBHbG9iYWwgLg0KDQpTYWx1ZG9zIHkgZXNwZXJvIHBvZGVyIHNlZ3VpciBsZXllbmRvIHRlIHkgY29udGludWFyIGVuIGVzdGUgcHJvY2VzbyBkZQ0KY3JlY2ltaWVudG8NCg0KRWwgbWFyLiwgMiBkZSBhZ29zdG8gZGUgMjAyMiA2OjE3IGEuIG0uLCBNYXVybyBDaG9qcmluIDwNCm1hdXJvLmNob2pyaW5AbGVld2F5d2ViLmNvbT4gZXNjcmliaT1DMz1CMzoNCg0KPiBIb2xhICwNCj4NCj4gICA9QzI9QkZDPUMzPUIzbW8gZXN0PUMzPUExcz8NCj4gICBVbmEgcHJlZ3VudGEgYmFzdGFudGUgY29tPUMzPUJBbiAoeSwgZW4gbWkgb3Bpbmk9QzM9QjNuIGFsIG1lbm9zLCBiYXN0YT0NCm50ZQ0KPiBtb2xlc3RhKTogPUMyPUJGUG9yIHF1PUMzPUE5IGVsZWc9QzM9QURzIFBIUD8gKEw9QzM9QTlhc2U6IGhhYmllbmRvIHRhbnRhPQ0KcyBvcGNpb25lcyBtZWpvcmVzLi4uDQo-ID1DMj1CRnRhbiBwb2NvIHRlIHF1ZXI9QzM9QTlzIGEgdm9zIG1pc21vPykuDQo-DQo-ICAgVXN1YWxtZW50ZSBlc3RhIHByZWd1bnRhIHZpZW5lIGRlIHBlcnNvbmFzIHF1ZSwgbyBiaWVuIG51bmNhIHByb2dyYW1hcm89DQpuDQo-IHBlcm8gZXN0PUMzPUExbiBkZSBhbGc9QzM9QkFuIG1vZG8gcmVsYWNpb25hZGFzIGFsID1DMz1BMXJlYSAoSVQgUmVjcnVpdGU9DQpycyBwb3IgZWplbXBsbykgbw0KPiBiaWVuIGdlbnRlIHF1ZSBwcm9ncmFtPUMzPUIzIGVuIFBIUCBlbiBlbCBhPUMzPUIxbyAyMDAwIHkgY3JlZSBxdWUgbG9zIHF1PQ0KZSB0b2Rhdj1DMz1BRGEgbG8NCj4gdXNhbW9zIG5vcyBxdWVkYW1vcyBjb25nZWxhZG9zIGVuIGVsIHRpZW1wby4uLg0KPg0KPiAgIE5vIGNvbm96Y28gbGFzIHJhem9uZXMgcXVlIHRlIGxsZXZhbiBhIHZvcyBhIGVsZWdpciBlc3RlIGxlbmd1YWplICg9QzI9DQo9QTFTaQ0KPiBxdWVyPUMzPUE5cyBjb250YXJtZSBubyBtZSBvZmVuZG8hKSwgcGVybyB0ZSB2b3kgYSBjb250YXIgY3U9QzM9QTFsZXMgc29uPQ0KIGxhcyBtPUMzPUFEYXM6DQo-DQo-ICAgIDEuIExhIGVub3JtZSBjYW50aWRhZCBkZSBzaXRpb3MgcHJvZ3JhbWFkb3MgZW4gUEhQDQo-ICAgIDIuIExhIGluY3JlPUMzPUFEYmxlIGNvbXVuaWRhZCBkZSBkZXNhcnJvbGxhZG9yZXMNCj4gICAgMy4gTGEgdmVsb2NpZGFkIGNvbiBsYSBxdWUgcHVlZG8gdGVuZXIgYWxnbyBmdW5jaW9uYW5kbw0KPiAgICA0LiBMbyBmPUMzPUExY2lsIHF1ZSBlcyBpbnRlZ3JhcmxvIGNvbiBzZXJ2aWRvcmVzIHdlYiBkZSB0b2RvIHRpcG8NCj4gICAgNS4gRWwgaGVjaG8gZGUgcG9kZXIgaGFjZXIgbW9kaWZpY2FjaW9uZXMgKmVuIGNhbGllbnRlICooU2luIHJlaW5pY2lhcg0KPiAgICBlbCB3ZWJzZXJ2ZXIpDQo-DQo-ICAgIEhlIGxlPUMzPUFEZG8gdW5hIHNlcmllIGRlIGNyPUMzPUFEdGljYXMgaGFjaWEgcGhwIGNvbW8gbGEgZmFtb3NhIFBIUCw9DQogYSBmcmFjdGFsDQo-IG9mIGJhZCBkZXNpZ24NCj4gPGh0dHBzOi8vbGVld2F5d2ViLnVzMTEubGlzdC1tYW5hZ2UuY29tL3RyYWNrL2NsaWNrP3U9M0QwYmI2Nzc2YjY0ZmExZmNmYz0NCjdhNGQwOGMxJmlkPTNEMWIzNzIwNjFkNSZlPTNEOTgxMGY1NGUyZj4geSwNCj4gc2kgYmllbiBlcyBjaWVydG8gbG8gcXVlIHNlIGNvbWVudGEsIGVuIG1pIGV4cGVyaWVuY2lhIHBlcnNvbmFsLCBubw0KPiByZWN1ZXJkbyBoYWJlcm1lIGVuY29udHJhZG8gY29uIGVzdG9zIHByb2JsZW1hcyAoQWwgbWVub3MsIG51bmNhIHN1cHVzaWVyPQ0Kb24NCj4gdW4gZXNjb2xsbyBzZXJpbyBwYXJhIGxvZ3JhciBtaXMgb2JqZXRpdm9zKSwgY29uIGxvIGN1YWwsIG1lIHBhcmVjZSBxdWUNCj4gc2lndWVuIHF1ZWRhbmRvIGVuIHVuIHBsYW5vIGFjYWQ9QzM9QTltaWNvIG09QzM9QTFzIHF1ZSBwcj1DMz1BMWN0aWNvLg0KPg0KPiAgIERlIGhlY2hvLCBzaSBzZSBzaWd1ZW4gZGUgY2VyY2EgbGFzIHJlY29tZW5kYWNpb25lcyBkZSBQSFA6IHQNCj4gPGh0dHBzOi8vbGVld2F5d2ViLnVzMTEubGlzdC1tYW5hZ2UuY29tL3RyYWNrL2NsaWNrP3U9M0QwYmI2Nzc2YjY0ZmExZmNmYz0NCjdhNGQwOGMxJmlkPTNEMTk4NDEyNGJlOSZlPTNEOTgxMGY1NGUyZj5oZQ0KPiByaWdodCB3YXkNCj4gPGh0dHBzOi8vbGVld2F5d2ViLnVzMTEubGlzdC1tYW5hZ2UuY29tL3RyYWNrL2NsaWNrP3U9M0QwYmI2Nzc2YjY0ZmExZmNmYz0NCjdhNGQwOGMxJmlkPTNEMTk4NDEyNGJlOSZlPTNEOTgxMGY1NGUyZj4gKFBlcmQ9QzM9QjNuLA0KPiBoYWI9QzM9QURhIHVuYSB2ZXJzaT1DMz1CM24gZW4gRXNwYT1DMz1CMW9sIHBlcm8gZXN0PUMzPUExIG11eSBkZXNhY3R1YWxpPQ0KemFkYSkgc2UgcHVlZGVuIGxvZ3Jhcg0KPiBhcGxpY2FjaW9uZXMgZGUgbXV5IGJ1ZW5hIGNhbGlkYWQgKHRhbnRvIGVuIGN1YW50byBhIGZ1bmNpb25hbGlkYWRlcyBjb21vPQ0KIGENCj4gbWFudGVuaWJpbGlkYWQpDQo-DQo-ICAgVGFtYmk9QzM9QTluIHRlIHJlY29taWVuZG8gbGVlciBlc3RlIGVuc2F5byBkZSBQYXVsIEdyYWhhbQ0KPiA8aHR0cHM6Ly9sZWV3YXl3ZWIudXMxMS5saXN0LW1hbmFnZS5jb20vdHJhY2svY2xpY2s_dT0zRDBiYjY3NzZiNjRmYTFmY2ZjPQ0KN2E0ZDA4YzEmaWQ9M0RmZmEzYWMyZDUwJmU9M0Q5ODEwZjU0ZTJmPiBkb25kZQ0KPiBoYWJsYSBzb2JyZSBsb3MgcGVsaWdyb3MgZGUgZWxlZ2lyIGxhIGhlcnJhbWllbnRhIHBvcHVsYXIgKEVsIHJlY29taWVuZGENCj4gTGlzcCBwZXJvIGlndWFsIHBpZW5zbyBxdWUgZWwgZXNwPUMzPUFEcml0dW8gZGVsIGFydD1DMz1BRGN1bG8gYXBsaWNhLi4uID0NCnkgcz1DMz1BRCwgZXMgZW4NCj4gaW5nbD1DMz1BOXMgeSBsYXJnby4uLiBzPUMzPUIzbG8gcGFyYSB2YWxpZW50ZXMgOikNCj4NCj4gICBZIHBvciA9QzM9QkFsdGltbywgbm8gb2x2aWRlbW9zIHF1ZSAqbG9zIGxlbmd1YWplcyBubyBkZWphbiBkZSBzZXINCj4gaGVycmFtaWVudGFzKiwgYWxndW5hcyBtZWpvcmVzIHBhcmEgYWxndW5vcyBlc2NlbmFyaW9zLCBhbGd1bmFzIG1lam9yZXMNCj4gcGFyYSBvdHJvcywgcGVybyBuaW5ndW5hIGVzIHBlcmZlY3RhLg0KPiA9QzI9QTFGZWxpeiBjb2RpbmchDQo-IC0tIE1hdXJvDQo-DQo-IDxodHRwczovL2xlZXdheXdlYi51czExLmxpc3QtbWFuYWdlLmNvbS90cmFjay9jbGljaz91PTNEMGJiNjc3NmI2NGZhMWZjZmM9DQo3YTRkMDhjMSZpZD0zRDNiNGUwY2I3N2QmZT0zRDk4MTBmNTRlMmY-DQo-IFR3aXRlYXINCj4gPGh0dHBzOi8vbGVld2F5d2ViLnVzMTEubGlzdC1tYW5hZ2UuY29tL3RyYWNrL2NsaWNrP3U9M0QwYmI2Nzc2YjY0ZmExZmNmYz0NCjdhNGQwOGMxJmlkPTNEM2I0ZTBjYjc3ZCZlPTNEOTgxMGY1NGUyZj4NCj4NCj4gPGh0dHA6Ly91czExLmZvcndhcmQtdG8tZnJpZW5kLmNvbS9mb3J3YXJkP3U9M0QwYmI2Nzc2YjY0ZmExZmNmYzdhNGQwOGMxJj0NCmlkPTNENGJlYjE2MTcyMyZlPTNEOTgxMGY1NGUyZj4NCj4gUmVlbnZpYXINCj4gPGh0dHA6Ly91czExLmZvcndhcmQtdG8tZnJpZW5kLmNvbS9mb3J3YXJkP3U9M0QwYmI2Nzc2YjY0ZmExZmNmYzdhNGQwOGMxJj0NCmlkPTNENGJlYjE2MTcyMyZlPTNEOTgxMGY1NGUyZj4NCj4NCj4gPGh0dHBzOi8vbGVld2F5d2ViLnVzMTEubGlzdC1tYW5hZ2UuY29tL3RyYWNrL2NsaWNrP3U9M0QwYmI2Nzc2YjY0ZmExZmNmYz0NCjdhNGQwOGMxJmlkPTNEZDE0OTQwYjg4NSZlPTNEOTgxMGY1NGUyZj4NCj4gQ29tcGFydGlyDQo-IDxodHRwczovL2xlZXdheXdlYi51czExLmxpc3QtbWFuYWdlLmNvbS90cmFjay9jbGljaz91PTNEMGJiNjc3NmI2NGZhMWZjZmM9DQo3YTRkMDhjMSZpZD0zRGQxNDk0MGI4ODUmZT0zRDk4MTBmNTRlMmY-DQo-DQo-IDxodHRwczovL2xlZXdheXdlYi51czExLmxpc3QtbWFuYWdlLmNvbS90cmFjay9jbGljaz91PTNEMGJiNjc3NmI2NGZhMWZjZmM9DQo3YTRkMDhjMSZpZD0zRGMzYzFhMTQ0MmEmZT0zRDk4MTBmNTRlMmY-DQo-IENvbXBhcnRpcg0KPiA8aHR0cHM6Ly9sZWV3YXl3ZWIudXMxMS5saXN0LW1hbmFnZS5jb20vdHJhY2svY2xpY2s_dT0zRDBiYjY3NzZiNjRmYTFmY2ZjPQ0KN2E0ZDA4YzEmaWQ9M0RjM2MxYTE0NDJhJmU9M0Q5ODEwZjU0ZTJmPg0KPiBFc3Q9QzM9QTFzIHJlY2liaWVuZG8gZXN0ZSBjb3JyZW8gcG9ycXVlIHRlIGRlc2Nhcmdhc3RlIGFsZz1DMz1CQW4gcmVjdXJzPQ0KbyBkZSBMZWV3YXkNCj4gQWNhZGVteSAoaHR0cHM6Ly9hY2FkZW15LmxlZXdheXdlYi5jb20pLg0KPiBNaSBkaXJlY2NpPUMzPUIzbiBwb3N0YWwgZXM6DQo-IExlZXdheQ0KPiBTdWNyZSAyNzMyDQo-IEJ1ZW5vcyBBaXJlcywgQ0FCQSBDMTQyNg0KPiBBcmdlbnRpbmENCj4NCj4gQWRkIHVzIHRvIHlvdXIgYWRkcmVzcyBib29rDQo-IDxodHRwczovL2xlZXdheXdlYi51czExLmxpc3QtbWFuYWdlLmNvbS92Y2FyZD91PTNEMGJiNjc3NmI2NGZhMWZjZmM3YTRkMDg9DQpjMSZpZD0zRGFhNDRlYTZhNzk-DQo-DQo-DQo-DQo-DQo-DQo-DQo-IFRoaXMgZW1haWwgd2FzIHNlbnQgdG8gYXNzZXJwY0BnbWFpbC5jb20NCj4gKndoeSBkaWQgSSBnZXQgdGhpcz8qDQo-IDxodHRwczovL2xlZXdheXdlYi51czExLmxpc3QtbWFuYWdlLmNvbS9hYm91dD91PTNEMGJiNjc3NmI2NGZhMWZjZmM3YTRkMDg9DQpjMSZpZD0zRGFhNDRlYTZhNzkmZT0zRDk4MTBmNTRlMmYmYz0zRDRiZWIxNjE3MjM-DQo-ICAgICB1bnN1YnNjcmliZSBmcm9tIHRoaXMgbGlzdA0KPiA8aHR0cHM6Ly9sZWV3YXl3ZWIudXMxMS5saXN0LW1hbmFnZS5jb20vdW5zdWJzY3JpYmU_dT0zRDBiYjY3NzZiNjRmYTFmY2ZjPQ0KN2E0ZDA4YzEmaWQ9M0RhYTQ0ZWE2YTc5JmU9M0Q5ODEwZjU0ZTJmJmM9M0Q0YmViMTYxNzIzPg0KPiAgICAgdXBkYXRlIHN1YnNjcmlwdGlvbiBwcmVmZXJlbmNlcw0KPiA8aHR0cHM6Ly9sZWV3YXl3ZWIudXMxMS5saXN0LW1hbmFnZS5jb20vcHJvZmlsZT91PTNEMGJiNjc3NmI2NGZhMWZjZmM3YTRkPQ0KMDhjMSZpZD0zRGFhNDRlYTZhNzkmZT0zRDk4MTBmNTRlMmYmYz0zRDRiZWIxNjE3MjM-DQo-IExlZXdheSA9QzI9QjcgU3VjcmUgMjczMiA9QzI9QjcgQnVlbm9zIEFpcmVzLCBDQUJBIEMxNDI2ID1DMj1CNyBBcmdlbnRpbmENCj4NCj4gW2ltYWdlOiBFbWFpbCBNYXJrZXRpbmcgUG93ZXJlZCBieSBNYWlsY2hpbXBdDQo-IDxodHRwOi8vd3d3Lm1haWxjaGltcC5jb20vZW1haWwtcmVmZXJyYWwvP3V0bV9zb3VyY2U9M0RmcmVlbWl1bV9uZXdzbGV0dGU9DQpyJnV0bV9tZWRpdW09M0RlbWFpbCZ1dG1fY2FtcGFpZ249M0RyZWZlcnJhbF9tYXJrZXRpbmcmYWlkPTNEMGJiNjc3NmI2NGZhMWY9DQpjZmM3YTRkMDhjMSZhZmw9M0QxPg0KPg0KDQotLTAwMDAwMDAwMDAwMDE3MGExMTA1ZTU0MmI4Y2ENCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sOyBjaGFyc2V0PSJVVEYtOCINCkNvbnRlbnQtVHJhbnNmZXItRW5jb2Rpbmc6IHF1b3RlZC1wcmludGFibGUNCg0KPGRpdiBkaXI9M0QiYXV0byI-U2FsdWRvcyBNYXVybyBlbiBlc2VuY2lhIG11eSBhcHJlY2lhZGFzIHR1cyBwYWxhYnJhcyBzb2JyPQ0KZSB0b2RvIHBhcmEgYXF1ZWxsb3MgcXVlIGRlbnRybyBkZSBudWVzdHJhIHByPUMzPUExY3RpY2EgaGFiaXR1YWwgaGVtb3MgZWxlPQ0KZ2lkbyBQSFAuPGRpdiBkaXI9M0QiYXV0byI-PGJyPjwvZGl2PjxkaXYgZGlyPTNEImF1dG8iPkluaWNpYWxtZW50ZSBlbiAyMDA0PQ0KIGN1YW5kbyBjb25vYz1DMz1BRCBlc3RlIGxlbmd1YWplLCB2ZW49QzM9QURhIGRlIGVzdGFyIGRlc2Fycm9sbGFuZG8gZW4gYysrPQ0KLCB5IGhhYmVyIHBhc2FkbyBwb3IgY29ib2wgRnVqaXRzdSB5IFBhc2NhbCwgdGFtYmk9QzM9QTluIGhhYmVyIHRlbmlkbyBsYSBvPQ0KcG9ydHVuaWRhZCBkZSBjb25vY2VyIGVsIEFzcCBkZSBNaWNyb3NvZnQgeSBKYXZhIGRlIHN1bSAoZW4gYXF1ZWwgdGllbXBvKT0NCj1DMj1BMDwvZGl2PjxkaXYgZGlyPTNEImF1dG8iPjxicj48L2Rpdj48ZGl2IGRpcj0zRCJhdXRvIj5ZIGVuIHZlcmRhZCBxdWVkPQ0KPUMzPUE5IGZhY2luYWRvIGNvbiBsYSBzaW1wbGljaWRhZCBkZSBjPUMzPUIzZGlnbyBxdWUgdmVuPUMzPUFEYSBhbCBkZWRvIGEgPQ0KcXVpZW4gaGFiPUMzPUFEYSB0ZW5pZG8gdW4gZW5jdWVudHJvIGNvbiBjKysgeSBKYXZhIGEgbWkgcGFyZWNlciBzYWNhYmEgbG8gPQ0KbWVqb3IgZGUgYW1ib3MuPC9kaXY-PGRpdiBkaXI9M0QiYXV0byI-PGJyPjwvZGl2PjxkaXYgZGlyPTNEImF1dG8iPlJlY3VlcmRvPQ0KIHF1ZSBlbCBhcXVlbCB0aWVtcG8gZWwgY21zIHBvcHVsYXIgKHBvciBsbyBtZW5vcyBlbiBtaXMgYz1DMz1BRHJjdWxvcykgZXJhPQ0KIFBIUCBudWtlIHkgdmVyIHF1PUMzPUE5IHBvZD1DMz1BRGFtb3MgaGFjZXIgeSBoYWNpYSBkb25kZSBwb2Q9QzM9QURhbW9zIGlyPQ0KIGNvbiBwaHAgeSBzdXMgZG9zIGFtaWdvcyAobXlzcWwgeSBwb3N0Z3JlcykgZXJhIGRlIGxvIG1lam9yLjwvZGl2PjxkaXYgZGlyPQ0KPTNEImF1dG8iPjxicj48L2Rpdj48ZGl2IGRpcj0zRCJhdXRvIj5BZGljaW9uYWxtZW50ZSBjb2luY2lkaT1DMz1CMyBjb24gbGEgPQ0KaW5zZXJjaT1DMz1CM24gZGUgZm9ybWEgbT1DMz1BMXMgZGlyZWN0YSBkZSBMaW51eCBlbiBlbCBtZXJjYWRvIGxvY2FsIHkgZXNvPQ0KIGV4cGFuZGk9QzM9QjMgZGUgZm9ybWEgcm90dW5kYSBsYXMgcG9zaWJpbGlkYWRlcy48L2Rpdj48ZGl2IGRpcj0zRCJhdXRvIj48PQ0KYnI-PC9kaXY-PGRpdiBkaXI9M0QiYXV0byI-U2kgYmllbiBjb24gcGhwIGhhc3RhIGVsIG1vbWVudG8gaGUgcG9kaWRvIGhhY2VyPQ0KIGNhc2kgZGUgdG9kbyBlcyBvYnZpbyBxdWUgZD1DMz1CM25kZSB0aWVuZSBzdSBtYXlvciBkZWJpbGlkYWQgZXMgZW4gc3UgY2FyPQ0KPUMzPUExY3RlciBiYWNrZW5kIChtaSBpZGVhbCBlcyBwb2RlciBjcmVhciB1biBwcm9jZXNvIHBhcmEgbG9zIG5hdmVnYWRvcmVzPQ0KIHF1ZSBsbyBoYWdhIHJpdmFsaXphciBjb24gSnMgZW4gZXN0ZSA9QzM9QTFtYml0bywgcXVpej1DMz1BMXMgZXMgdW4gc3VlPUMzPQ0KPUIxbyBsb2NvKS48L2Rpdj48ZGl2IGRpcj0zRCJhdXRvIj48YnI-PC9kaXY-PGRpdiBkaXI9M0QiYXV0byI-Q3JlbyBxdWUgaG95PQ0KIGVuIGQ9QzM9QURhIHNlYSBkZWphZG8gbXVjaG8gZGUgbGFkbyBlbCBwb2RlciBkZSBlc3RhIGhlcnJhbWllbnRhIHkgc2UgaGEgPQ0KaWRvIHN1cGxhbnRhbmRvIGNvbiBlbCBwb2RlciBkZSBqcyB5IHN1IHVuaXZlcnNvIHF1ZSBhdW5xdWUgbm8gY29tcGxldGEgdG9kPQ0Kb3MgbG9zIGFzcGVjdG9zIGNhZGEgZD1DMz1BRGEgYWJhcmNhIG09QzM9QTFzIGVsIGFiYW5pY28gZGVsIGJhY2sgeSBlbCBmcm9uPQ0KdC48L2Rpdj48ZGl2IGRpcj0zRCJhdXRvIj48YnI-PC9kaXY-PGRpdiBkaXI9M0QiYXV0byI-RGUgaGVjaG8gZXN0byBlcyBsbyBxPQ0KdWUgbWUgaGEgaW1wdWxzYWRvIGEgZm9ybWFybWUgdGFtYmk9QzM9QTluIGVuIGpzIHBhcmEgcG9kZXIgZXN0YXIgYWwgZD1DMz0NCj1BRGEgZW4gZWxlbWVudG9zIG5lY2VzYXJpb3MgcGFyYSBhdGVuZGVyIGxhcyBkZW1hbmRhcyBkZSBob3kuPC9kaXY-PGRpdiBkaT0NCnI9M0QiYXV0byI-PGJyPjwvZGl2PjxkaXYgZGlyPTNEImF1dG8iPkxhc3RpbW9zYW1lbnRlIGRlYm8gYWRtaXRpciAocXVlIHNpZT0NCm1wcmUgbWUgZW50cmlzdGVjZSBsYSBsaW1pdGFudGUgZGVsIGluZ2w9QzM9QTlzIHkgbT1DMz1BMXMgYT1DMz1CQW4gZW4gbGEgYT0NCmN0dWFsaWRhZCB5IHNpZ28gc29zdGVuaWVuZG8gcXVlIGVzIHBlcmZlY3RhbWVudGUgdmlhYmxlIHVuIHByb2Nlc29zIGRlIGRlcz0NCmFycm9sbG8gY29uIGVxdWlwb3MgbXVsdGkgaWRpb209QzM9QTF0aWNvcyBzaW4gdGVuZXIgcXVlIGRlcGVuZGVyIGRlbCBpbmdsPQ0KPUMzPUE5cy4gRW50ZW5kaWVuZG8gcXVlIGhheSBlbiBsYSBhY3R1YWxpZGFkIE1pbGVzIGRlIHNvbHVjaW9uZXMgZGUgdHJhZHVjPQ0KY2k9QzM9QjNuIG9ubGluZSBxdWUgbG8gaGFjZW4gcz1DMz1BRG1pbCk8L2Rpdj48ZGl2IGRpcj0zRCJhdXRvIj5QRVJPIE5BREEsPQ0KLiBIYXkgcXVlIHZpdmlyIGNvbiBsYSByZWFsaWRhZCB5IGVzIHF1ZSBlbiBsYSBtaXNtYSBzZSByZWxlZ2EgYSBsYSBwZXJzb25hPQ0KIHNpIG5vIGRvbWluYSBlbCBpbmdsPUMzPUE5cyBlbiB1biBuaXZlbCBlbGV2YWRvLjwvZGl2PjxkaXYgZGlyPTNEImF1dG8iPjxiPQ0Kcj48L2Rpdj48ZGl2IGRpcj0zRCJhdXRvIj5IYWNlIHVub3MgZD1DMz1BRGFzIHRlIGNvbWVudGFiYSBxdWUgcGFyYSBtPUMzPUFEPQ0KIGxlZXIgZWwgaW5nbD1DMz1BOXMgbm8gdGllbmUgcHJvYmxlbWEgYWxndW5vLjwvZGl2PjxkaXYgZGlyPTNEImF1dG8iPkFob3JhPQ0KIGJpZW4gZW50ZW5kZXJsbyBlbiBhdWRpbyAoZXMgZGVjaXIgZW50ZW5kZXIgbG8gcXVlIHNlIGRpY2UgY3VhbmRvIGFsZ3VpZW4gPQ0KaGFibGEgZW4gaW5nbD1DMz1BOXMpIHNpIHBhcmEgbT1DMz1BRCBjb25zaWRlcm8gcXVlIHNvbG8gZWwgMzAlPC9kaXY-PGRpdiBkPQ0KaXI9M0QiYXV0byI-WSBlc2NyaWJpcmxvIGRpcj1DMz1BRGEgcXVlIGRlIDQwLTUwJSBwZXJvIHNpIHN1bW8gZWwgdXNvIGRlIHRyPQ0KYWR1Y3RvciBlc2UgcG9yY2VudGFqZSBsbGVnYSBhIDgwLTkwJSAuPC9kaXY-PGRpdiBkaXI9M0QiYXV0byI-PGJyPjwvZGl2PjxkPQ0KaXYgZGlyPTNEImF1dG8iPjxicj48L2Rpdj48ZGl2IGRpcj0zRCJhdXRvIj5EZSBoZWNobyBbcGVyZG9uYSBsbyBleHRlbnNvIGRlPQ0KIG1pIG1haWxdIGhlIHBvZGlkbyB0cmFiYWphciBjb24gcGVyc29uYXMgZGUgaGFibGEgaW5nbGVzYSBwb3IgbT1DMz1BMXMgZGUgPQ0KMSBhPUMzPUIxbyBzaW4gbmluZz1DMz1CQW4gZGV0YWxsZSwgYSBkZWNpciB2ZXJkYWQgaGUgdHJhYmFqYWRvIGNvbiBwZXJzb25hPQ0KcyBkZSBpbmRpYSwgZGUgY2hpbmEsIGNvcmVhLCBFRVVVIHkgbm8gaGUgdGVuaWRvIGluY29udmVuaWVudGVzIG5pIGVuIGxhcyBhPQ0Kc2lnbmFjaW9uZXMsIG5pIGVuIGxhIGV4cHJlc2k9QzM9QjNuIGRlIGlkZWFzLCBhY2xhcmF0b3JpYXMgbyBjb3JyZWN0aXZvcy48PQ0KL2Rpdj48ZGl2IGRpcj0zRCJhdXRvIj48YnI-PC9kaXY-PGRpdiBkaXI9M0QiYXV0byI-U2lnbyBjbGFybyBxdWUgcz1DMz1BRCBlPQ0KbiBsYSBiPUMzPUJBc3F1ZWRhIGRlIHVuIHB1ZXN0byBsYWJvcmFyIHF1ZSBtZSBwZXJtaXRhIHVuIG1heW9yIGNyZWNpbWllbnRvPQ0KIGEgbGEgcGFyIGRlIHNhbGlyIGRlIGxvcyBwcm95ZWN0b3MgY29uIHN0YXJ0dXBzIGxhdGluYXMgY3V5YSByZW11bmVyYWNpPUMzPQ0KPUIzbiBbIHNpIG1lIHBlcm1pdGVzIGVsIGNvbWVudGFyaW9dIGVzIHVuIHZhbG9yIG11eSA9QzM9QURuZmltbyBlbiBjb21wYXJhPQ0KdGl2byBjb24gZWwgbWVyY2FkbyBHbG9iYWwgLjwvZGl2PjxkaXYgZGlyPTNEImF1dG8iPjxicj48L2Rpdj48ZGl2IGRpcj0zRCJhPQ0KdXRvIj5TYWx1ZG9zIHkgZXNwZXJvIHBvZGVyIHNlZ3VpciBsZXllbmRvIHRlIHkgY29udGludWFyIGVuIGVzdGUgcHJvY2VzbyBkPQ0KZSBjcmVjaW1pZW50bz1DMj1BMDwvZGl2PjwvZGl2Pjxicj48ZGl2IGNsYXNzPTNEImdtYWlsX3F1b3RlIj48ZGl2IGRpcj0zRCJsPQ0KdHIiIGNsYXNzPTNEImdtYWlsX2F0dHIiPkVsIG1hci4sIDIgZGUgYWdvc3RvIGRlIDIwMjIgNjoxNyBhLj1DMj1BMG0uLCBNYXVyPQ0KbyBDaG9qcmluICZsdDs8YSBocmVmPTNEIm1haWx0bzptYXVyby5jaG9qcmluQGxlZXdheXdlYi5jb20iPm1hdXJvLmNob2pyaW5APQ0KbGVld2F5d2ViLmNvbTwvYT4mZ3Q7IGVzY3JpYmk9QzM9QjM6PGJyPjwvZGl2PjxibG9ja3F1b3RlIGNsYXNzPTNEImdtYWlsX3F1PQ0Kb3RlIiBzdHlsZT0zRCJtYXJnaW46MCAwIDAgLjhleDtib3JkZXItbGVmdDoxcHggI2NjYyBzb2xpZDtwYWRkaW5nLWxlZnQ6MWV4PQ0KIj48dT48L3U-DQoNCiAgID0yMA0KICAgICAgID0yMA0KICAgICAgID0yMA0KICAgICAgID0yMA0KICAgICAgID0yMA0KICAgICAgID0yMA0KICAgICAgID0yMA0KDQogICA9MjANCiAgICA8ZGl2IHN0eWxlPTNEImJhY2tncm91bmQ6I2ZmZmZmZiBub25lIG5vLXJlcGVhdCBjZW50ZXIvY292ZXI7aGVpZ2h0OjEwMD0NCiU7bWFyZ2luOjA7cGFkZGluZzowO3dpZHRoOjEwMCU7YmFja2dyb3VuZC1jb2xvcjojZmZmZmZmO2JhY2tncm91bmQtaW1hZ2U6bj0NCm9uZTtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXI7YmFja2dyb3VuZC1zaXplOj0NCmNvdmVyIj4NCiAgICAgICA9MjANCiAgICAgICAgPGNlbnRlcj4NCiAgICAgICAgICAgIDx0YWJsZSBhbGlnbj0zRCJjZW50ZXIiIGJvcmRlcj0zRCIwIiBjZWxscGFkZGluZz0zRCIwIiBjZWxsc3BhYz0NCmluZz0zRCIwIiBoZWlnaHQ9M0QiMTAwJSIgd2lkdGg9M0QiMTAwJSIgaWQ9M0QibV8tMzczOTc4NjE2MjAyODA3NDEzMmJvZHlUYT0NCmJsZSIgc3R5bGU9M0QiYmFja2dyb3VuZDojZmZmZmZmIG5vbmUgbm8tcmVwZWF0IGNlbnRlci9jb3Zlcjtib3JkZXItY29sbGFwcz0NCmU6Y29sbGFwc2U7aGVpZ2h0OjEwMCU7bWFyZ2luOjA7cGFkZGluZzowO3dpZHRoOjEwMCU7YmFja2dyb3VuZC1jb2xvcjojZmZmZj0NCmZmO2JhY2tncm91bmQtaW1hZ2U6bm9uZTtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjpjZT0NCm50ZXI7YmFja2dyb3VuZC1zaXplOmNvdmVyIj4NCiAgICAgICAgICAgICAgICA8dHI-DQogICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj0zRCJsZWZ0IiB2YWxpZ249M0QidG9wIiBpZD0zRCJtXy0zNzM5Nzg2MTYyMDI9DQo4MDc0MTMyYm9keUNlbGwiIHN0eWxlPTNEImhlaWdodDoxMDAlO21hcmdpbjowO3BhZGRpbmc6MTBweDt3aWR0aDoxMDAlO2JvcmQ9DQplci10b3A6MCI-DQogICAgICAgICAgICAgICAgICAgICAgID0yMA0KICAgICAgICAgICAgICAgICAgICAgICA9MjANCiAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9M0QiMCIgY2VsbHBhZGRpbmc9M0QiMCIgY2VsbHNwYWNpbmc9DQo9M0QiMCIgd2lkdGg9M0QiMTAwJSIgY2xhc3M9M0QibV8tMzczOTc4NjE2MjAyODA3NDEzMnRlbXBsYXRlQ29udGFpbmVyIiBzdHk9DQpsZT0zRCJib3JkZXItY29sbGFwc2U6Y29sbGFwc2U7Ym9yZGVyOjA7bWF4LXdpZHRoOjYwMHB4IWltcG9ydGFudCI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgdmFsaWduPTNEInRvcCIgaWQ9M0QibV8tMzczOTc4NjE2MjAyODA3PQ0KNDEzMnRlbXBsYXRlSGVhZGVyIiBzdHlsZT0zRCJib3JkZXItdG9wOjA7Ym9yZGVyLWJvdHRvbTowIj48dGFibGUgYm9yZGVyPTNEPQ0KIjAiIGNlbGxwYWRkaW5nPTNEIjAiIGNlbGxzcGFjaW5nPTNEIjAiIHdpZHRoPTNEIjEwMCUiIHN0eWxlPTNEIm1pbi13aWR0aDoxPQ0KMDAlO2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZSI-DQogICAgPHRib2R5Pg0KICAgICAgICA8dHI-DQogICAgICAgICAgICA8dGQgdmFsaWduPTNEInRvcCIgc3R5bGU9M0QicGFkZGluZy10b3A6OXB4Ij4NCiAgICAgICAgICAgICAgPTA5DQoJCT0wOQ0KCQkJPTA5DQogICAgICAgICAgICAgICAgPHRhYmxlIGFsaWduPTNEImxlZnQiIGJvcmRlcj0zRCIwIiBjZWxscGFkZGluZz0zRCIwIiBjZWxsc3A9DQphY2luZz0zRCIwIiBzdHlsZT0zRCJtYXgtd2lkdGg6MTAwJTttaW4td2lkdGg6MTAwJTtib3JkZXItY29sbGFwc2U6Y29sbGFwc2U9DQoiIHdpZHRoPTNEIjEwMCUiIGNsYXNzPTNEIm1fLTM3Mzk3ODYxNjIwMjgwNzQxMzJtY25UZXh0Q29udGVudENvbnRhaW5lciI-DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT48dHI-DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCB2YWxpZ249M0QidG9wIiBjbGFzcz0zRCJtXy0zNzM5Nzg2MTYyMDI4MDc0MTMybT0NCmNuVGV4dENvbnRlbnQiIHN0eWxlPTNEInBhZGRpbmctdG9wOjA7cGFkZGluZy1yaWdodDoxOHB4O3BhZGRpbmctYm90dG9tOjlweD0NCjtwYWRkaW5nLWxlZnQ6MThweDt3b3JkLWJyZWFrOmJyZWFrLXdvcmQ7Y29sb3I6IzIwMjAyMDtmb250LWZhbWlseTpIZWx2ZXRpYz0NCmE7Zm9udC1zaXplOjE2cHg7bGluZS1oZWlnaHQ6MTUwJTt0ZXh0LWFsaWduOmxlZnQiPg0KSG9sYQ0KLDxicj4NCjxicj4NCj1DMj1BMCA9QzI9QkZDPUMzPUIzbW8gZXN0PUMzPUExcz8NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ-DQogICAgICAgICAgICAgICAgICAgIDwvdHI-DQogICAgICAgICAgICAgICAgPC90Ym9keT48L3RhYmxlPg0KCQkJPTA5DQoNCgkJCT0wOQ0KICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgPC90cj4NCiAgICA8L3Rib2R5Pg0KPC90YWJsZT48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgdmFsaWduPTNEInRvcCIgaWQ9M0QibV8tMzczOTc4NjE2MjAyODA3PQ0KNDEzMnRlbXBsYXRlQm9keSIgc3R5bGU9M0QiYm9yZGVyLXRvcDowO2JvcmRlci1ib3R0b206MCI-PHRhYmxlIGJvcmRlcj0zRCIwPQ0KIiBjZWxscGFkZGluZz0zRCIwIiBjZWxsc3BhY2luZz0zRCIwIiB3aWR0aD0zRCIxMDAlIiBzdHlsZT0zRCJtaW4td2lkdGg6MTAwPQ0KJTtib3JkZXItY29sbGFwc2U6Y29sbGFwc2UiPg0KICAgIDx0Ym9keT4NCiAgICAgICAgPHRyPg0KICAgICAgICAgICAgPHRkIHZhbGlnbj0zRCJ0b3AiIHN0eWxlPTNEInBhZGRpbmctdG9wOjlweCI-DQogICAgICAgICAgICAgID0wOQ0KCQk9MDkNCgkJCT0wOQ0KICAgICAgICAgICAgICAgIDx0YWJsZSBhbGlnbj0zRCJsZWZ0IiBib3JkZXI9M0QiMCIgY2VsbHBhZGRpbmc9M0QiMCIgY2VsbHNwPQ0KYWNpbmc9M0QiMCIgc3R5bGU9M0QibWF4LXdpZHRoOjEwMCU7bWluLXdpZHRoOjEwMCU7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlPQ0KIiB3aWR0aD0zRCIxMDAlIiBjbGFzcz0zRCJtXy0zNzM5Nzg2MTYyMDI4MDc0MTMybWNuVGV4dENvbnRlbnRDb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk-PHRyPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8dGQgdmFsaWduPTNEInRvcCIgY2xhc3M9M0QibV8tMzczOTc4NjE2MjAyODA3NDEzMm09DQpjblRleHRDb250ZW50IiBzdHlsZT0zRCJwYWRkaW5nLXRvcDowO3BhZGRpbmctcmlnaHQ6MThweDtwYWRkaW5nLWJvdHRvbTo5cHg9DQo7cGFkZGluZy1sZWZ0OjE4cHg7d29yZC1icmVhazpicmVhay13b3JkO2NvbG9yOiMyMDIwMjA7Zm9udC1mYW1pbHk6SGVsdmV0aWM9DQphO2ZvbnQtc2l6ZToxNnB4O2xpbmUtaGVpZ2h0OjE1MCU7dGV4dC1hbGlnbjpsZWZ0Ij4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgID1DMj1BMCBVbmEgcHJlZ3VudGEgYmFzdGFudGUgY29tPUMzPUJBbiAoeSwgZW4gPQ0KbWkgb3Bpbmk9QzM9QjNuIGFsIG1lbm9zLCBiYXN0YW50ZSBtb2xlc3RhKTogPUMyPUJGUG9yIHF1PUMzPUE5IGVsZWc9QzM9QURzPQ0KIFBIUD8gKEw9QzM9QTlhc2U6IGhhYmllbmRvIHRhbnRhcyBvcGNpb25lcyBtZWpvcmVzLi4uID1DMj1CRnRhbiBwb2NvIHRlIHF1PQ0KZXI9QzM9QTlzIGEgdm9zIG1pc21vPykuPGJyPg0KPGJyPg0KPUMyPUEwIFVzdWFsbWVudGUgZXN0YSBwcmVndW50YSB2aWVuZSBkZSBwZXJzb25hcyBxdWUsIG8gYmllbiBudW5jYSBwcm9ncmFtPQ0KYXJvbiBwZXJvIGVzdD1DMz1BMW4gZGUgYWxnPUMzPUJBbiBtb2RvIHJlbGFjaW9uYWRhcyBhbCA9QzM9QTFyZWEgKElUIFJlY3J1PQ0KaXRlcnMgcG9yIGVqZW1wbG8pIG8gYmllbiBnZW50ZSBxdWUgcHJvZ3JhbT1DMz1CMyBlbiBQSFAgZW4gZWwgYT1DMz1CMW8gMjAwPQ0KMCB5IGNyZWUgcXVlIGxvcyBxdWUgdG9kYXY9QzM9QURhIGxvIHVzYW1vcyBub3MgcXVlZGFtb3MgY29uZ2VsYWRvcyBlbiBlbCB0PQ0KaWVtcG8uLi48YnI-DQo8YnI-DQo9QzI9QTAgTm8gY29ub3pjbyBsYXMgcmF6b25lcyBxdWUgdGUgbGxldmFuIGEgdm9zIGEgZWxlZ2lyIGVzdGUgbGVuZ3VhamUgKD0NCj1DMj1BMVNpIHF1ZXI9QzM9QTlzIGNvbnRhcm1lIG5vIG1lIG9mZW5kbyEpLCBwZXJvIHRlIHZveSBhIGNvbnRhciBjdT1DMz1BMT0NCmxlcyBzb24gbGFzIG09QzM9QURhczoNCjxvbD4NCgk8bGk-TGEgZW5vcm1lIGNhbnRpZGFkIGRlIHNpdGlvcyBwcm9ncmFtYWRvcyBlbiBQSFA8L2xpPg0KCTxsaT5MYSBpbmNyZT1DMz1BRGJsZSBjb211bmlkYWQgZGUgZGVzYXJyb2xsYWRvcmVzPC9saT4NCgk8bGk-TGEgdmVsb2NpZGFkIGNvbiBsYSBxdWUgcHVlZG8gdGVuZXIgYWxnbyBmdW5jaW9uYW5kbzwvbGk-DQoJPGxpPkxvIGY9QzM9QTFjaWwgcXVlIGVzIGludGVncmFybG8gY29uIHNlcnZpZG9yZXMgd2ViIGRlIHRvZG8gdGlwbzwvbGk-DQoJPGxpPkVsIGhlY2hvIGRlIHBvZGVyIGhhY2VyIG1vZGlmaWNhY2lvbmVzIDxlbT5lbiBjYWxpZW50ZSA8L2VtPihTaW4gcmVpbmk9DQpjaWFyIGVsIHdlYnNlcnZlcik8L2xpPg0KPC9vbD4NCj1DMj1BMD1DMj1BMCBIZSBsZT1DMz1BRGRvIHVuYSBzZXJpZSBkZSBjcj1DMz1BRHRpY2FzIGhhY2lhIHBocCBjb21vIGxhIGZhbT0NCm9zYSA8YSBocmVmPTNEImh0dHBzOi8vbGVld2F5d2ViLnVzMTEubGlzdC1tYW5hZ2UuY29tL3RyYWNrL2NsaWNrP3U9M0QwYmI2Nz0NCjc2YjY0ZmExZmNmYzdhNGQwOGMxJmFtcDtpZD0zRDFiMzcyMDYxZDUmYW1wO2U9M0Q5ODEwZjU0ZTJmIiBzdHlsZT0zRCJjb2xvcj0NCjojMDA3Yzg5O2ZvbnQtd2VpZ2h0Om5vcm1hbDt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lIiB0YXJnZXQ9M0QiX2JsYW5rIiByZT0NCmw9M0Qibm9yZWZlcnJlciI-UEhQLCBhIGZyYWN0YWwgb2YgYmFkIGRlc2lnbjwvYT49QzI9QTB5LCBzaSBiaWVuIGVzIGNpZXJ0bz0NCiBsbyBxdWUgc2UgY29tZW50YSwgZW4gbWkgZXhwZXJpZW5jaWEgcGVyc29uYWwsIG5vIHJlY3VlcmRvIGhhYmVybWUgZW5jb250cj0NCmFkbyBjb24gZXN0b3MgcHJvYmxlbWFzIChBbCBtZW5vcywgbnVuY2Egc3VwdXNpZXJvbiB1biBlc2NvbGxvIHNlcmlvIHBhcmEgbD0NCm9ncmFyIG1pcyBvYmpldGl2b3MpLCBjb24gbG8gY3VhbCwgbWUgcGFyZWNlIHF1ZSBzaWd1ZW4gcXVlZGFuZG8gZW4gdW4gcGxhbj0NCm8gYWNhZD1DMz1BOW1pY28gbT1DMz1BMXMgcXVlIHByPUMzPUExY3RpY28uPGJyPg0KPGJyPg0KPUMyPUEwIERlIGhlY2hvLCBzaSBzZSBzaWd1ZW4gZGUgY2VyY2EgbGFzIHJlY29tZW5kYWNpb25lcyBkZSA8YSBocmVmPTNEImh0PQ0KdHBzOi8vbGVld2F5d2ViLnVzMTEubGlzdC1tYW5hZ2UuY29tL3RyYWNrL2NsaWNrP3U9M0QwYmI2Nzc2YjY0ZmExZmNmYzdhNGQwPQ0KOGMxJmFtcDtpZD0zRDE5ODQxMjRiZTkmYW1wO2U9M0Q5ODEwZjU0ZTJmIiBzdHlsZT0zRCJjb2xvcjojMDA3Yzg5O2ZvbnQtd2VpPQ0KZ2h0Om5vcm1hbDt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lIiB0YXJnZXQ9M0QiX2JsYW5rIiByZWw9M0Qibm9yZWZlcnJlciI-PQ0KUEhQOiB0PC9hPjxhIGhyZWY9M0QiaHR0cHM6Ly9sZWV3YXl3ZWIudXMxMS5saXN0LW1hbmFnZS5jb20vdHJhY2svY2xpY2s_dT0NCj0zRDBiYjY3NzZiNjRmYTFmY2ZjN2E0ZDA4YzEmYW1wO2lkPTNEMTk4NDEyNGJlOSZhbXA7ZT0zRDk4MTBmNTRlMmYiIHN0eWxlPQ0KPTNEImNvbG9yOiMwMDdjODk7Zm9udC13ZWlnaHQ6bm9ybWFsO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmUiIHRhcmdldD0zRCJfPQ0KYmxhbmsiIHJlbD0zRCJub3JlZmVycmVyIj5oZSByaWdodCB3YXk8L2E-PUMyPUEwKFBlcmQ9QzM9QjNuLCBoYWI9QzM9QURhIHVuPQ0KYSB2ZXJzaT1DMz1CM24gZW4gRXNwYT1DMz1CMW9sIHBlcm8gZXN0PUMzPUExIG11eSBkZXNhY3R1YWxpemFkYSk9QzI9QTBzZSBwPQ0KdWVkZW4gbG9ncmFyIGFwbGljYWNpb25lcyBkZSBtdXkgYnVlbmEgY2FsaWRhZCAodGFudG8gZW4gY3VhbnRvIGEgZnVuY2lvbmFsPQ0KaWRhZGVzIGNvbW8gYSBtYW50ZW5pYmlsaWRhZCk8YnI-DQo8YnI-DQo9QzI9QTAgVGFtYmk9QzM9QTluIHRlIHJlY29taWVuZG8gbGVlciA8YSBocmVmPTNEImh0dHBzOi8vbGVld2F5d2ViLnVzMTEubGk9DQpzdC1tYW5hZ2UuY29tL3RyYWNrL2NsaWNrP3U9M0QwYmI2Nzc2YjY0ZmExZmNmYzdhNGQwOGMxJmFtcDtpZD0zRGZmYTNhYzJkNTA9DQomYW1wO2U9M0Q5ODEwZjU0ZTJmIiBzdHlsZT0zRCJjb2xvcjojMDA3Yzg5O2ZvbnQtd2VpZ2h0Om5vcm1hbDt0ZXh0LWRlY29yYXQ9DQppb246dW5kZXJsaW5lIiB0YXJnZXQ9M0QiX2JsYW5rIiByZWw9M0Qibm9yZWZlcnJlciI-ZXN0ZSBlbnNheW8gZGUgUGF1bCBHcmE9DQpoYW08L2E-PUMyPUEwZG9uZGUgaGFibGEgc29icmUgbG9zIHBlbGlncm9zIGRlIGVsZWdpciBsYSBoZXJyYW1pZW50YSBwb3B1bGE9DQpyIChFbCByZWNvbWllbmRhIExpc3AgcGVybyBpZ3VhbCBwaWVuc28gcXVlIGVsIGVzcD1DMz1BRHJpdHVvIGRlbCBhcnQ9QzM9QUQ9DQpjdWxvIGFwbGljYS4uLiB5IHM9QzM9QUQsIGVzIGVuIGluZ2w9QzM9QTlzIHkgbGFyZ28uLi4gcz1DMz1CM2xvIHBhcmEgdmFsaWU9DQpudGVzIDopPGJyPg0KPGJyPg0KPUMyPUEwPUMyPUEwWSBwb3IgPUMzPUJBbHRpbW8sIG5vIG9sdmlkZW1vcyBxdWUgPHN0cm9uZz5sb3MgbGVuZ3VhamVzIG5vIGRlPQ0KamFuIGRlIHNlciBoZXJyYW1pZW50YXM8L3N0cm9uZz4sIGFsZ3VuYXMgbWVqb3JlcyBwYXJhIGFsZ3Vub3MgZXNjZW5hcmlvcywgPQ0KYWxndW5hcyBtZWpvcmVzIHBhcmEgb3Ryb3MsIHBlcm8gbmluZ3VuYSBlcyBwZXJmZWN0YS4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ-DQogICAgICAgICAgICAgICAgICAgIDwvdHI-DQogICAgICAgICAgICAgICAgPC90Ym9keT48L3RhYmxlPg0KCQkJPTA5DQoNCgkJCT0wOQ0KICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgPC90cj4NCiAgICA8L3Rib2R5Pg0KPC90YWJsZT48dGFibGUgYm9yZGVyPTNEIjAiIGNlbGxwYWRkaW5nPTNEIjAiIGNlbGxzcGFjaW5nPTNEIjAiIHdpZHRoPTNEIjEwPQ0KMCUiIHN0eWxlPTNEIm1pbi13aWR0aDoxMDAlO2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZSI-DQogICAgPHRib2R5Pg0KICAgICAgICA8dHI-DQogICAgICAgICAgICA8dGQgdmFsaWduPTNEInRvcCIgc3R5bGU9M0QicGFkZGluZy10b3A6OXB4Ij4NCiAgICAgICAgICAgICAgPTA5DQoJCT0wOQ0KCQkJPTA5DQogICAgICAgICAgICAgICAgPHRhYmxlIGFsaWduPTNEImxlZnQiIGJvcmRlcj0zRCIwIiBjZWxscGFkZGluZz0zRCIwIiBjZWxsc3A9DQphY2luZz0zRCIwIiBzdHlsZT0zRCJtYXgtd2lkdGg6MTAwJTttaW4td2lkdGg6MTAwJTtib3JkZXItY29sbGFwc2U6Y29sbGFwc2U9DQoiIHdpZHRoPTNEIjEwMCUiIGNsYXNzPTNEIm1fLTM3Mzk3ODYxNjIwMjgwNzQxMzJtY25UZXh0Q29udGVudENvbnRhaW5lciI-DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT48dHI-DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCB2YWxpZ249M0QidG9wIiBjbGFzcz0zRCJtXy0zNzM5Nzg2MTYyMDI4MDc0MTMybT0NCmNuVGV4dENvbnRlbnQiIHN0eWxlPTNEInBhZGRpbmctdG9wOjA7cGFkZGluZy1yaWdodDoxOHB4O3BhZGRpbmctYm90dG9tOjlweD0NCjtwYWRkaW5nLWxlZnQ6MThweDt3b3JkLWJyZWFrOmJyZWFrLXdvcmQ7Y29sb3I6IzIwMjAyMDtmb250LWZhbWlseTpIZWx2ZXRpYz0NCmE7Zm9udC1zaXplOjE2cHg7bGluZS1oZWlnaHQ6MTUwJTt0ZXh0LWFsaWduOmxlZnQiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPUMyPUExRmVsaXogY29kaW5nIQ0KPGRpdiBzdHlsZT0zRCJ0ZXh0LWFsaWduOnJpZ2h0Ij4tLSBNYXVybzwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDwvdGJvZHk-PC90YWJsZT4NCgkJCT0wOQ0KDQoJCQk9MDkNCiAgICAgICAgICAgIDwvdGQ-DQogICAgICAgIDwvdHI-DQogICAgPC90Ym9keT4NCjwvdGFibGU-PHRhYmxlIGJvcmRlcj0zRCIwIiBjZWxscGFkZGluZz0zRCIwIiBjZWxsc3BhY2luZz0zRCIwIiB3aWR0aD0zRCIxMD0NCjAlIiBzdHlsZT0zRCJtaW4td2lkdGg6MTAwJTtib3JkZXItY29sbGFwc2U6Y29sbGFwc2UiPg0KICAgIDx0Ym9keT4NCiAgICAgICAgPHRyPg0KICAgICAgICAgICAgPHRkIHZhbGlnbj0zRCJ0b3AiIHN0eWxlPTNEInBhZGRpbmctdG9wOjlweCI-DQogICAgICAgICAgICAgID0wOQ0KCQk9MDkNCgkJCT0wOQ0KICAgICAgICAgICAgICAgIDx0YWJsZSBhbGlnbj0zRCJsZWZ0IiBib3JkZXI9M0QiMCIgY2VsbHBhZGRpbmc9M0QiMCIgY2VsbHNwPQ0KYWNpbmc9M0QiMCIgc3R5bGU9M0QibWF4LXdpZHRoOjEwMCU7bWluLXdpZHRoOjEwMCU7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlPQ0KIiB3aWR0aD0zRCIxMDAlIiBjbGFzcz0zRCJtXy0zNzM5Nzg2MTYyMDI4MDc0MTMybWNuVGV4dENvbnRlbnRDb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk-PHRyPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8dGQgdmFsaWduPTNEInRvcCIgY2xhc3M9M0QibV8tMzczOTc4NjE2MjAyODA3NDEzMm09DQpjblRleHRDb250ZW50IiBzdHlsZT0zRCJwYWRkaW5nLXRvcDowO3BhZGRpbmctcmlnaHQ6MThweDtwYWRkaW5nLWJvdHRvbTo5cHg9DQo7cGFkZGluZy1sZWZ0OjE4cHg7d29yZC1icmVhazpicmVhay13b3JkO2NvbG9yOiMyMDIwMjA7Zm9udC1mYW1pbHk6SGVsdmV0aWM9DQphO2ZvbnQtc2l6ZToxNnB4O2xpbmUtaGVpZ2h0OjE1MCU7dGV4dC1hbGlnbjpsZWZ0Ij4NCg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDwvdGJvZHk-PC90YWJsZT4NCgkJCT0wOQ0KDQoJCQk9MDkNCiAgICAgICAgICAgIDwvdGQ-DQogICAgICAgIDwvdHI-DQogICAgPC90Ym9keT4NCjwvdGFibGU-PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHZhbGlnbj0zRCJ0b3AiIGlkPTNEIm1fLTM3Mzk3ODYxNjIwMjgwNz0NCjQxMzJ0ZW1wbGF0ZUZvb3RlciIgc3R5bGU9M0QiYm9yZGVyLXRvcDowO2JvcmRlci1ib3R0b206MCI-PHRhYmxlIGJvcmRlcj0zRD0NCiIwIiBjZWxscGFkZGluZz0zRCIwIiBjZWxsc3BhY2luZz0zRCIwIiB3aWR0aD0zRCIxMDAlIiBzdHlsZT0zRCJtaW4td2lkdGg6MT0NCjAwJTtib3JkZXItY29sbGFwc2U6Y29sbGFwc2UiPg0KICAgIDx0Ym9keT4NCiAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICA8dGQgdmFsaWduPTNEInRvcCIgc3R5bGU9M0QicGFkZGluZzo5cHgiPg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgYm9yZGVyPTNEIjAiIGNlbGxwYWRkaW5nPTNEIjAiIGNlbGxzcGFjaW5nPTNEIjAiPQ0KIHdpZHRoPTNEIjEwMCUiIHN0eWxlPTNEIm1pbi13aWR0aDoxMDAlO2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZSI-DQogICAgPHRib2R5Pjx0cj4NCiAgICAgICAgPHRkIGFsaWduPTNEImNlbnRlciIgc3R5bGU9M0QicGFkZGluZy10b3A6MDtwYWRkaW5nLWxlZnQ6OXB4O3BhZGRpbj0NCmctYm90dG9tOjA7cGFkZGluZy1yaWdodDo5cHgiPg0KICAgICAgICAgICAgPHRhYmxlIGFsaWduPTNEImNlbnRlciIgYm9yZGVyPTNEIjAiIGNlbGxwYWRkaW5nPTNEIjAiIGNlbGxzcGFjPQ0KaW5nPTNEIjAiIHdpZHRoPTNEIjEwMCUiIHN0eWxlPTNEIm1pbi13aWR0aDoxMDAlO2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZSI-DQogICAgICAgICAgICAgICAgPHRib2R5Pjx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPTNEImNlbnRlciIgdmFsaWduPTNEInRvcCIgc3R5bGU9M0QicGFkZGluZy10bz0NCnA6OXB4O3BhZGRpbmctcmlnaHQ6OXB4O3BhZGRpbmctbGVmdDo5cHgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGFsaWduPTNEImNlbnRlciIgYm9yZGVyPTNEIjAiIGNlbGxwYWRkaW5nPTNEPQ0KIjAiIGNlbGxzcGFjaW5nPTNEIjAiIHN0eWxlPTNEImJvcmRlci1jb2xsYXBzZTpjb2xsYXBzZSI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pjx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPTNEImxlZnQiIHZhbGlnbj0zRCJ0b3AiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9MjANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPTIwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGFsaWduPTNEImxlZnQiIGJvcmRlcj0zRCIwIiA9DQpjZWxscGFkZGluZz0zRCIwIiBjZWxsc3BhY2luZz0zRCIwIiBzdHlsZT0zRCJib3JkZXItY29sbGFwc2U6Y29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk-PHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHZhbGlnbj0zRCJ0b3AiIHN0eWxlPTNEPQ0KInBhZGRpbmctcmlnaHQ6OXB4O3BhZGRpbmctYm90dG9tOjlweCI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0zRCIwIiBjZWw9DQpscGFkZGluZz0zRCIwIiBjZWxsc3BhY2luZz0zRCIwIiB3aWR0aD0zRCIiIHN0eWxlPTNEImJvcmRlci1jb2xsYXBzZTpzZXBhcmE9DQp0ZSI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT48dHI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgYWxpZ249M0QibGU9DQpmdCIgdmFsaWduPTNEIm1pZGRsZSIgc3R5bGU9M0QicGFkZGluZy10b3A6NXB4O3BhZGRpbmctcmlnaHQ6OXB4O3BhZGRpbmctYm89DQp0dG9tOjVweDtwYWRkaW5nLWxlZnQ6OXB4Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgYWxpZz0NCm49M0QibGVmdCIgYm9yZGVyPTNEIjAiIGNlbGxwYWRkaW5nPTNEIjAiIGNlbGxzcGFjaW5nPTNEIjAiIHdpZHRoPTNEIiIgc3R5bD0NCmU9M0QiYm9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pj0NCjx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD0NCiBhbGlnbj0zRCJjZW50ZXIiIHZhbGlnbj0zRCJtaWRkbGUiIHdpZHRoPTNEIjI0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0NCiA8YSBocmVmPTNEImh0dHBzOi8vbGVld2F5d2ViLnVzMTEubGlzdC1tYW5hZ2UuY29tL3RyYWNrL2NsaWNrP3U9M0QwYmI2Nzc2Yj0NCjY0ZmExZmNmYzdhNGQwOGMxJmFtcDtpZD0zRDNiNGUwY2I3N2QmYW1wO2U9M0Q5ODEwZjU0ZTJmIiB0YXJnZXQ9M0QiX2JsYW5rIj0NCiByZWw9M0Qibm9yZWZlcnJlciI-PGltZyBzcmM9M0QiaHR0cHM6Ly9jZG4taW1hZ2VzLm1haWxjaGltcC5jb20vaWNvbnMvc29jaT0NCmFsLWJsb2NrLXYyL2NvbG9yLXR3aXR0ZXItNDgucG5nIiBzdHlsZT0zRCJkaXNwbGF5OmJsb2NrO2JvcmRlcjowO2hlaWdodDphdT0NCnRvO291dGxpbmU6bm9uZTt0ZXh0LWRlY29yYXRpb246bm9uZSIgaGVpZ2h0PTNEIjI0IiB3aWR0aD0zRCIyNCI-PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90PQ0KZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD0NCiBhbGlnbj0zRCJsZWZ0IiB2YWxpZ249M0QibWlkZGxlIiBzdHlsZT0zRCJwYWRkaW5nLWxlZnQ6NXB4Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0NCiA8YSBocmVmPTNEImh0dHBzOi8vbGVld2F5d2ViLnVzMTEubGlzdC1tYW5hZ2UuY29tL3RyYWNrL2NsaWNrP3U9M0QwYmI2Nzc2Yj0NCjY0ZmExZmNmYzdhNGQwOGMxJmFtcDtpZD0zRDNiNGUwY2I3N2QmYW1wO2U9M0Q5ODEwZjU0ZTJmIiBzdHlsZT0zRCJjb2xvcjojMj0NCjAyMDIwO2ZvbnQtZmFtaWx5OkFyaWFsO2ZvbnQtc2l6ZToxMnB4O2ZvbnQtd2VpZ2h0Om5vcm1hbDtsaW5lLWhlaWdodDpub3JtYT0NCmw7dGV4dC1hbGlnbjpjZW50ZXI7dGV4dC1kZWNvcmF0aW9uOm5vbmUiIHRhcmdldD0zRCJfYmxhbmsiIHJlbD0zRCJub3JlZmVycj0NCmVyIj5Ud2l0ZWFyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90PQ0KZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PjwvdD0NCmFibGU-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk-PC90YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT48L3RhYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPTIwDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0yMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBhbGlnbj0zRCJsZWZ0IiBib3JkZXI9M0QiMCIgPQ0KY2VsbHBhZGRpbmc9M0QiMCIgY2VsbHNwYWNpbmc9M0QiMCIgc3R5bGU9M0QiYm9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pjx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCB2YWxpZ249M0QidG9wIiBzdHlsZT0zRD0NCiJwYWRkaW5nLXJpZ2h0OjlweDtwYWRkaW5nLWJvdHRvbTo5cHgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9M0QiMCIgY2VsPQ0KbHBhZGRpbmc9M0QiMCIgY2VsbHNwYWNpbmc9M0QiMCIgd2lkdGg9M0QiIiBzdHlsZT0zRCJib3JkZXItY29sbGFwc2U6c2VwYXJhPQ0KdGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk-PHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPTNEImxlPQ0KZnQiIHZhbGlnbj0zRCJtaWRkbGUiIHN0eWxlPTNEInBhZGRpbmctdG9wOjVweDtwYWRkaW5nLXJpZ2h0OjlweDtwYWRkaW5nLWJvPQ0KdHRvbTo1cHg7cGFkZGluZy1sZWZ0OjlweCI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGFsaWc9DQpuPTNEImxlZnQiIGJvcmRlcj0zRCIwIiBjZWxscGFkZGluZz0zRCIwIiBjZWxsc3BhY2luZz0zRCIwIiB3aWR0aD0zRCIiIHN0eWw9DQplPTNEImJvcmRlci1jb2xsYXBzZTpjb2xsYXBzZSI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT49DQo8dHI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ9DQogYWxpZ249M0QiY2VudGVyIiB2YWxpZ249M0QibWlkZGxlIiB3aWR0aD0zRCIyNCI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9DQogPGEgaHJlZj0zRCJodHRwOi8vdXMxMS5mb3J3YXJkLXRvLWZyaWVuZC5jb20vZm9yd2FyZD91PTNEMGJiNjc3NmI2NGZhMWZjZmM9DQo3YTRkMDhjMSZhbXA7aWQ9M0Q0YmViMTYxNzIzJmFtcDtlPTNEOTgxMGY1NGUyZiIgdGFyZ2V0PTNEIl9ibGFuayIgcmVsPTNEIm49DQpvcmVmZXJyZXIiPjxpbWcgc3JjPTNEImh0dHBzOi8vY2RuLWltYWdlcy5tYWlsY2hpbXAuY29tL2ljb25zL3NvY2lhbC1ibG9jay09DQp2Mi9jb2xvci1mb3J3YXJkdG9mcmllbmQtNDgucG5nIiBzdHlsZT0zRCJkaXNwbGF5OmJsb2NrO2JvcmRlcjowO2hlaWdodDphdXQ9DQpvO291dGxpbmU6bm9uZTt0ZXh0LWRlY29yYXRpb246bm9uZSIgaGVpZ2h0PTNEIjI0IiB3aWR0aD0zRCIyNCI-PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90PQ0KZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD0NCiBhbGlnbj0zRCJsZWZ0IiB2YWxpZ249M0QibWlkZGxlIiBzdHlsZT0zRCJwYWRkaW5nLWxlZnQ6NXB4Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0NCiA8YSBocmVmPTNEImh0dHA6Ly91czExLmZvcndhcmQtdG8tZnJpZW5kLmNvbS9mb3J3YXJkP3U9M0QwYmI2Nzc2YjY0ZmExZmNmYz0NCjdhNGQwOGMxJmFtcDtpZD0zRDRiZWIxNjE3MjMmYW1wO2U9M0Q5ODEwZjU0ZTJmIiBzdHlsZT0zRCJjb2xvcjojMjAyMDIwO2Zvbj0NCnQtZmFtaWx5OkFyaWFsO2ZvbnQtc2l6ZToxMnB4O2ZvbnQtd2VpZ2h0Om5vcm1hbDtsaW5lLWhlaWdodDpub3JtYWw7dGV4dC1hbD0NCmlnbjpjZW50ZXI7dGV4dC1kZWNvcmF0aW9uOm5vbmUiIHRhcmdldD0zRCJfYmxhbmsiIHJlbD0zRCJub3JlZmVycmVyIj5SZWVudj0NCmlhcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdD0NCmQ-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT48L3Q9DQphYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PjwvdGFibGU-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk-PC90YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0yMA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9MjANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgYWxpZ249M0QibGVmdCIgYm9yZGVyPTNEIjAiID0NCmNlbGxwYWRkaW5nPTNEIjAiIGNlbGxzcGFjaW5nPTNEIjAiIHN0eWxlPTNEImJvcmRlci1jb2xsYXBzZTpjb2xsYXBzZSI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT48dHI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgdmFsaWduPTNEInRvcCIgc3R5bGU9M0Q9DQoicGFkZGluZy1yaWdodDo5cHg7cGFkZGluZy1ib3R0b206OXB4Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgYm9yZGVyPTNEIjAiIGNlbD0NCmxwYWRkaW5nPTNEIjAiIGNlbGxzcGFjaW5nPTNEIjAiIHdpZHRoPTNEIiIgc3R5bGU9M0QiYm9yZGVyLWNvbGxhcHNlOnNlcGFyYT0NCnRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pjx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj0zRCJsZT0NCmZ0IiB2YWxpZ249M0QibWlkZGxlIiBzdHlsZT0zRCJwYWRkaW5nLXRvcDo1cHg7cGFkZGluZy1yaWdodDo5cHg7cGFkZGluZy1ibz0NCnR0b206NXB4O3BhZGRpbmctbGVmdDo5cHgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBhbGlnPQ0Kbj0zRCJsZWZ0IiBib3JkZXI9M0QiMCIgY2VsbHBhZGRpbmc9M0QiMCIgY2VsbHNwYWNpbmc9M0QiMCIgd2lkdGg9M0QiIiBzdHlsPQ0KZT0zRCJib3JkZXItY29sbGFwc2U6Y29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk-PQ0KPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPQ0KIGFsaWduPTNEImNlbnRlciIgdmFsaWduPTNEIm1pZGRsZSIgd2lkdGg9M0QiMjQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPQ0KIDxhIGhyZWY9M0QiaHR0cHM6Ly9sZWV3YXl3ZWIudXMxMS5saXN0LW1hbmFnZS5jb20vdHJhY2svY2xpY2s_dT0zRDBiYjY3NzZiPQ0KNjRmYTFmY2ZjN2E0ZDA4YzEmYW1wO2lkPTNEZDE0OTQwYjg4NSZhbXA7ZT0zRDk4MTBmNTRlMmYiIHRhcmdldD0zRCJfYmxhbmsiPQ0KIHJlbD0zRCJub3JlZmVycmVyIj48aW1nIHNyYz0zRCJodHRwczovL2Nkbi1pbWFnZXMubWFpbGNoaW1wLmNvbS9pY29ucy9zb2NpPQ0KYWwtYmxvY2stdjIvY29sb3ItZmFjZWJvb2stNDgucG5nIiBzdHlsZT0zRCJkaXNwbGF5OmJsb2NrO2JvcmRlcjowO2hlaWdodDphPQ0KdXRvO291dGxpbmU6bm9uZTt0ZXh0LWRlY29yYXRpb246bm9uZSIgaGVpZ2h0PTNEIjI0IiB3aWR0aD0zRCIyNCI-PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90PQ0KZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD0NCiBhbGlnbj0zRCJsZWZ0IiB2YWxpZ249M0QibWlkZGxlIiBzdHlsZT0zRCJwYWRkaW5nLWxlZnQ6NXB4Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0NCiA8YSBocmVmPTNEImh0dHBzOi8vbGVld2F5d2ViLnVzMTEubGlzdC1tYW5hZ2UuY29tL3RyYWNrL2NsaWNrP3U9M0QwYmI2Nzc2Yj0NCjY0ZmExZmNmYzdhNGQwOGMxJmFtcDtpZD0zRGQxNDk0MGI4ODUmYW1wO2U9M0Q5ODEwZjU0ZTJmIiBzdHlsZT0zRCJjb2xvcjojMj0NCjAyMDIwO2ZvbnQtZmFtaWx5OkFyaWFsO2ZvbnQtc2l6ZToxMnB4O2ZvbnQtd2VpZ2h0Om5vcm1hbDtsaW5lLWhlaWdodDpub3JtYT0NCmw7dGV4dC1hbGlnbjpjZW50ZXI7dGV4dC1kZWNvcmF0aW9uOm5vbmUiIHRhcmdldD0zRCJfYmxhbmsiIHJlbD0zRCJub3JlZmVycj0NCmVyIj5Db21wYXJ0aXI8L2E-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Q9DQpkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk-PC90PQ0KYWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT48L3RhYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PjwvdGFibGU-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9MjANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPTIwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGFsaWduPTNEImxlZnQiIGJvcmRlcj0zRCIwIiA9DQpjZWxscGFkZGluZz0zRCIwIiBjZWxsc3BhY2luZz0zRCIwIiBzdHlsZT0zRCJib3JkZXItY29sbGFwc2U6Y29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk-PHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHZhbGlnbj0zRCJ0b3AiIHN0eWxlPTNEPQ0KInBhZGRpbmctcmlnaHQ6MDtwYWRkaW5nLWJvdHRvbTo5cHgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9M0QiMCIgY2VsPQ0KbHBhZGRpbmc9M0QiMCIgY2VsbHNwYWNpbmc9M0QiMCIgd2lkdGg9M0QiIiBzdHlsZT0zRCJib3JkZXItY29sbGFwc2U6c2VwYXJhPQ0KdGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk-PHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPTNEImxlPQ0KZnQiIHZhbGlnbj0zRCJtaWRkbGUiIHN0eWxlPTNEInBhZGRpbmctdG9wOjVweDtwYWRkaW5nLXJpZ2h0OjlweDtwYWRkaW5nLWJvPQ0KdHRvbTo1cHg7cGFkZGluZy1sZWZ0OjlweCI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGFsaWc9DQpuPTNEImxlZnQiIGJvcmRlcj0zRCIwIiBjZWxscGFkZGluZz0zRCIwIiBjZWxsc3BhY2luZz0zRCIwIiB3aWR0aD0zRCIiIHN0eWw9DQplPTNEImJvcmRlci1jb2xsYXBzZTpjb2xsYXBzZSI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT49DQo8dHI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ9DQogYWxpZ249M0QiY2VudGVyIiB2YWxpZ249M0QibWlkZGxlIiB3aWR0aD0zRCIyNCI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9DQogPGEgaHJlZj0zRCJodHRwczovL2xlZXdheXdlYi51czExLmxpc3QtbWFuYWdlLmNvbS90cmFjay9jbGljaz91PTNEMGJiNjc3NmI9DQo2NGZhMWZjZmM3YTRkMDhjMSZhbXA7aWQ9M0RjM2MxYTE0NDJhJmFtcDtlPTNEOTgxMGY1NGUyZiIgdGFyZ2V0PTNEIl9ibGFuayI9DQogcmVsPTNEIm5vcmVmZXJyZXIiPjxpbWcgc3JjPTNEImh0dHBzOi8vY2RuLWltYWdlcy5tYWlsY2hpbXAuY29tL2ljb25zL3NvY2k9DQphbC1ibG9jay12Mi9jb2xvci1saW5rZWRpbi00OC5wbmciIHN0eWxlPTNEImRpc3BsYXk6YmxvY2s7Ym9yZGVyOjA7aGVpZ2h0OmE9DQp1dG87b3V0bGluZTpub25lO3RleHQtZGVjb3JhdGlvbjpub25lIiBoZWlnaHQ9M0QiMjQiIHdpZHRoPTNEIjI0Ij48L2E-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Q9DQpkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPQ0KIGFsaWduPTNEImxlZnQiIHZhbGlnbj0zRCJtaWRkbGUiIHN0eWxlPTNEInBhZGRpbmctbGVmdDo1cHgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPQ0KIDxhIGhyZWY9M0QiaHR0cHM6Ly9sZWV3YXl3ZWIudXMxMS5saXN0LW1hbmFnZS5jb20vdHJhY2svY2xpY2s_dT0zRDBiYjY3NzZiPQ0KNjRmYTFmY2ZjN2E0ZDA4YzEmYW1wO2lkPTNEYzNjMWExNDQyYSZhbXA7ZT0zRDk4MTBmNTRlMmYiIHN0eWxlPTNEImNvbG9yOiMyPQ0KMDIwMjA7Zm9udC1mYW1pbHk6QXJpYWw7Zm9udC1zaXplOjEycHg7Zm9udC13ZWlnaHQ6bm9ybWFsO2xpbmUtaGVpZ2h0Om5vcm1hPQ0KbDt0ZXh0LWFsaWduOmNlbnRlcjt0ZXh0LWRlY29yYXRpb246bm9uZSIgdGFyZ2V0PTNEIl9ibGFuayIgcmVsPTNEIm5vcmVmZXJyPQ0KZXIiPkNvbXBhcnRpcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdD0NCmQ-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT48L3Q9DQphYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PjwvdGFibGU-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk-PC90YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0yMA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0yMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI-DQogICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PjwvdGFibGU-DQogICAgICAgICAgICAgICAgICAgIDwvdGQ-DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgIDwvdGJvZHk-PC90YWJsZT4NCiAgICAgICAgPC90ZD4NCiAgICA8L3RyPg0KPC90Ym9keT48L3RhYmxlPg0KDQogICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgIDwvdHI-DQogICAgPC90Ym9keT4NCjwvdGFibGU-PHRhYmxlIGJvcmRlcj0zRCIwIiBjZWxscGFkZGluZz0zRCIwIiBjZWxsc3BhY2luZz0zRCIwIiB3aWR0aD0zRCIxMD0NCjAlIiBzdHlsZT0zRCJtaW4td2lkdGg6MTAwJTtib3JkZXItY29sbGFwc2U6Y29sbGFwc2UiPg0KICAgIDx0Ym9keT4NCiAgICAgICAgPHRyPg0KICAgICAgICAgICAgPHRkIHZhbGlnbj0zRCJ0b3AiIHN0eWxlPTNEInBhZGRpbmctdG9wOjlweCI-DQogICAgICAgICAgICAgID0wOQ0KCQk9MDkNCgkJCT0wOQ0KICAgICAgICAgICAgICAgIDx0YWJsZSBhbGlnbj0zRCJsZWZ0IiBib3JkZXI9M0QiMCIgY2VsbHBhZGRpbmc9M0QiMCIgY2VsbHNwPQ0KYWNpbmc9M0QiMCIgc3R5bGU9M0QibWF4LXdpZHRoOjEwMCU7bWluLXdpZHRoOjEwMCU7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlPQ0KIiB3aWR0aD0zRCIxMDAlIiBjbGFzcz0zRCJtXy0zNzM5Nzg2MTYyMDI4MDc0MTMybWNuVGV4dENvbnRlbnRDb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk-PHRyPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8dGQgdmFsaWduPTNEInRvcCIgY2xhc3M9M0QibV8tMzczOTc4NjE2MjAyODA3NDEzMm09DQpjblRleHRDb250ZW50IiBzdHlsZT0zRCJwYWRkaW5nLXRvcDowO3BhZGRpbmctcmlnaHQ6MThweDtwYWRkaW5nLWJvdHRvbTo5cHg9DQo7cGFkZGluZy1sZWZ0OjE4cHg7d29yZC1icmVhazpicmVhay13b3JkO2NvbG9yOiMyMDIwMjA7Zm9udC1mYW1pbHk6SGVsdmV0aWM9DQphO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1MCU7dGV4dC1hbGlnbjpsZWZ0Ij4NCiBFc3Q9QzM9QTFzIHJlY2liaWVuZG8gZXN0ZSBjb3JyZW8gcG9ycXVlIHRlIGRlc2Nhcmdhc3RlIGFsZz1DMz1CQW4gcmVjdXJzbz0NCiBkZSBMZWV3YXkgQWNhZGVteSAoPGEgaHJlZj0zRCJodHRwczovL2FjYWRlbXkubGVld2F5d2ViLmNvbSIgdGFyZ2V0PTNEIl9ibD0NCmFuayIgcmVsPTNEIm5vcmVmZXJyZXIiPmh0dHBzOi8vYWNhZGVteS5sZWV3YXl3ZWIuY29tPC9hPikuPGJyPg0KTWkgZGlyZWNjaT1DMz1CM24gcG9zdGFsIGVzOj1DMj1BMDxkaXY-PHNwYW4-TGVld2F5PC9zcGFuPjxkaXY-PGRpdj5TdWNyZSAyPQ0KNzMyPC9kaXY-PHNwYW4-QnVlbm9zIEFpcmVzPC9zcGFuPiwgPHNwYW4-Q0FCQTwvc3Bhbj4gIDxzcGFuPkMxNDI2PC9zcGFuPiA8PQ0KZGl2PkFyZ2VudGluYTwvZGl2PjwvZGl2Pjxicj48YSBocmVmPTNEImh0dHBzOi8vbGVld2F5d2ViLnVzMTEubGlzdC1tYW5hZ2UuPQ0KY29tL3ZjYXJkP3U9M0QwYmI2Nzc2YjY0ZmExZmNmYzdhNGQwOGMxJmFtcDtpZD0zRGFhNDRlYTZhNzkiIHRhcmdldD0zRCJfYmxhPQ0KbmsiIHJlbD0zRCJub3JlZmVycmVyIj5BZGQgdXMgdG8geW91ciBhZGRyZXNzIGJvb2s8L2E-PC9kaXY-DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDwvdGJvZHk-PC90YWJsZT4NCgkJCT0wOQ0KDQoJCQk9MDkNCiAgICAgICAgICAgIDwvdGQ-DQogICAgICAgIDwvdHI-DQogICAgPC90Ym9keT4NCjwvdGFibGU-PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgPTIwDQogICAgICAgICAgICAgICAgICAgICAgID0yMA0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI-DQogICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICA8L2NlbnRlcj4NCiAgICAgICAgICAgICAgICA8Y2VudGVyPg0KICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICA8YnI-DQogICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICA8YnI-DQogICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9M0QiMCIgY2VsbHBhZGRpbmc9M0QiMCIgY2VsbHNwYWNpbmc9M0QiMCIgd2lkPQ0KdGg9M0QiMTAwJSIgaWQ9M0QibV8tMzczOTc4NjE2MjAyODA3NDEzMmNhbnNwYW1CYXJXcmFwcGVyIiBzdHlsZT0zRCJiYWNrZ3JvPQ0KdW5kLWNvbG9yOiNmZmZmZmY7Ym9yZGVyLXRvcDoxcHggc29saWQgI2U1ZTVlNSI-DQogICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj0zRCJjZW50ZXIiIHZhbGlnbj0zRCJ0b3AiIHN0eWxlPTNEInBhZGRpbj0NCmctdG9wOjIwcHg7cGFkZGluZy1ib3R0b206MjBweCI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0zRCIwIiBjZWxscGFkZGluZz0zRCIwIiBjZWxsc3BhY2k9DQpuZz0zRCIwIiBpZD0zRCJtXy0zNzM5Nzg2MTYyMDI4MDc0MTMyY2Fuc3BhbUJhciI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj0zRCJjZW50ZXIiIHZhbGlnbj0zRCJ0b3AiIHN0eT0NCmxlPTNEImNvbG9yOiM2MDYwNjA7Zm9udC1mYW1pbHk6SGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWY7Zm9udC1zaXplOjExcHg7bD0NCmluZS1oZWlnaHQ6MTUwJTtwYWRkaW5nLXJpZ2h0OjIwcHg7cGFkZGluZy1ib3R0b206NXB4O3BhZGRpbmctbGVmdDoyMHB4O3RleD0NCnQtYWxpZ246Y2VudGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGlzIGVtYWlsIHdhcyBzZW50IHRvIDxhIGhyZWY9M0QibT0NCmFpbHRvOmFzc2VycGNAZ21haWwuY29tIiBzdHlsZT0zRCJjb2xvcjojNDA0MDQwIWltcG9ydGFudCIgdGFyZ2V0PTNEIl9ibGFuaz0NCiIgcmVsPTNEIm5vcmVmZXJyZXIiPmFzc2VycGNAZ21haWwuY29tPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPTNEImh0dHBzOi8vbGVld2F5d2ViLnVzMTEubD0NCmlzdC1tYW5hZ2UuY29tL2Fib3V0P3U9M0QwYmI2Nzc2YjY0ZmExZmNmYzdhNGQwOGMxJmFtcDtpZD0zRGFhNDRlYTZhNzkmYW1wOz0NCmU9M0Q5ODEwZjU0ZTJmJmFtcDtjPTNENGJlYjE2MTcyMyIgc3R5bGU9M0QiY29sb3I6IzQwNDA0MCFpbXBvcnRhbnQiIHRhcmdldD0NCj0zRCJfYmxhbmsiIHJlbD0zRCJub3JlZmVycmVyIj48ZW0-d2h5IGRpZCBJIGdldCB0aGlzPzwvZW0-PC9hPj1DMj1BMD1DMj1BMD0NCj1DMj1BMD1DMj1BMDxhIGhyZWY9M0QiaHR0cHM6Ly9sZWV3YXl3ZWIudXMxMS5saXN0LW1hbmFnZS5jb20vdW5zdWJzY3JpYmU_dT0NCj0zRDBiYjY3NzZiNjRmYTFmY2ZjN2E0ZDA4YzEmYW1wO2lkPTNEYWE0NGVhNmE3OSZhbXA7ZT0zRDk4MTBmNTRlMmYmYW1wO2M9DQo9M0Q0YmViMTYxNzIzIiBzdHlsZT0zRCJjb2xvcjojNDA0MDQwIWltcG9ydGFudCIgdGFyZ2V0PTNEIl9ibGFuayIgcmVsPTNEIm49DQpvcmVmZXJyZXIiPnVuc3Vic2NyaWJlIGZyb20gdGhpcyBsaXN0PC9hPj1DMj1BMD1DMj1BMD1DMj1BMD1DMj1BMDxhIGhyZWY9M0Q9DQoiaHR0cHM6Ly9sZWV3YXl3ZWIudXMxMS5saXN0LW1hbmFnZS5jb20vcHJvZmlsZT91PTNEMGJiNjc3NmI2NGZhMWZjZmM3YTRkMDg9DQpjMSZhbXA7aWQ9M0RhYTQ0ZWE2YTc5JmFtcDtlPTNEOTgxMGY1NGUyZiZhbXA7Yz0zRDRiZWIxNjE3MjMiIHN0eWxlPTNEImNvbG89DQpyOiM0MDQwNDAhaW1wb3J0YW50IiB0YXJnZXQ9M0QiX2JsYW5rIiByZWw9M0Qibm9yZWZlcnJlciI-dXBkYXRlIHN1YnNjcmlwdGk9DQpvbiBwcmVmZXJlbmNlczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGVld2F5ID1DMj1CNyBTdWNyZSAyNzMyID1DMj1CNyBCdWU9DQpub3MgQWlyZXMsIENBQkEgQzE0MjYgPUMyPUI3IEFyZ2VudGluYQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0zRCJodHRwOi8vd3d3Lm1haWxjaGltcC5jb209DQovZW1haWwtcmVmZXJyYWwvP3V0bV9zb3VyY2U9M0RmcmVlbWl1bV9uZXdzbGV0dGVyJmFtcDt1dG1fbWVkaXVtPTNEZW1haWwmYW09DQpwO3V0bV9jYW1wYWlnbj0zRHJlZmVycmFsX21hcmtldGluZyZhbXA7YWlkPTNEMGJiNjc3NmI2NGZhMWZjZmM3YTRkMDhjMSZhbXA9DQo7YWZsPTNEMSIgdGFyZ2V0PTNEIl9ibGFuayIgcmVsPTNEIm5vcmVmZXJyZXIiPjxpbWcgc3JjPTNEImh0dHBzOi8vY2RuLWltYWc9DQplcy5tYWlsY2hpbXAuY29tL21vbmtleV9yZXdhcmRzL01DX01vbmtleVJld2FyZF8xNS5wbmciIGJvcmRlcj0zRCIwIiBhbHQ9M0Q9DQoiRW1haWwgTWFya2V0aW5nIFBvd2VyZWQgYnkgTWFpbGNoaW1wIiB0aXRsZT0zRCJNYWlsY2hpbXAgRW1haWwgTWFya2V0aW5nIiA9DQp3aWR0aD0zRCIxMzkiIGhlaWdodD0zRCI1NCIgc3R5bGU9M0QibWF4LXdpZHRoOjEwMCU7aGVpZ2h0OmF1dG8iPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI-DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ-DQogICAgICAgICAgICAgICAgICAgIDwvdHI-DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgICAgID0yMA0KICAgICAgICAgICAgPC9jZW50ZXI-PGltZyBzcmM9M0QiaHR0cHM6Ly9sZWV3YXl3ZWIudXMxMS5saXN0LW1hbmFnZS5jb20vdHJhPQ0KY2svb3Blbi5waHA_dT0zRDBiYjY3NzZiNjRmYTFmY2ZjN2E0ZDA4YzEmYW1wO2lkPTNENGJlYjE2MTcyMyZhbXA7ZT0zRDk4MTBmPQ0KNTRlMmYiIGhlaWdodD0zRCIxIiB3aWR0aD0zRCIxIiBhbHQ9M0QiIj48L2Rpdj4NCjwvYmxvY2txdW90ZT48L2Rpdj4NCg0KLS0wMDAwMDAwMDAwMDAxNzBhMTEwNWU1NDJiOGNhLS0NCg==",
                new Sender("Andri Chirigüita <asserpc@gmail.com>"),
                new DateTimeImmutable("2022-08-02 10:13:09"),
            ],
            [
                "",
                new Sender("Mauro Chojrin <mauro.chojrin@leewayweb.com>"),
                new DateTimeImmutable("13-01-2022 12:13:27"),
            ]
        ];
    }

    protected function setUp(): void
    {
        parent::setUp();
        $this->gmailDAO = $this->createMock(GmailDAO::class);
        $this->gmailRepository = new GmailRepository($this->gmailDAO, new Parser());
    }
}
